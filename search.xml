<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/10/08/%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E5%BA%93/"/>
      <url>/2019/10/08/%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="GeoJson"><a href="#GeoJson" class="headerlink" title="GeoJson"></a>GeoJson</h1><blockquote><p>GeoJSON是一种用于编码各种地理数据结构的格式。</p></blockquote><ol><li>结构</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"Feature"</span>,</span><br><span class="line">        <span class="attr">"properties"</span>:&#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Dinagat Islands"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"geometry"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"Point"</span>,</span><br><span class="line">            <span class="attr">"coordinates"</span>:[<span class="number">105.380859375</span>,<span class="number">31.57853542647338</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FeatureCollection</code>是根节点，所有地理要素放在features的列表里。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>类型</li></ol><p><code>GeoJSON</code>支持以下几种类型：</p><ul><li><p>Point</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: [<span class="number">105.380859375</span>, <span class="number">31.57853542647338</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  点要素类型type对应<code>Point</code>，坐标是一维数组，里面有两个元素(如果是立体的坐标就是三维x,y,z)，分别为经度和纬度。<code>properties</code>里面可以封装各种属性。</p></li><li><p>MultiPoint</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiPoint"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [<span class="number">105.380859375</span>, <span class="number">31.57853542647338</span>],</span><br><span class="line">            [<span class="number">105.580859375</span>, <span class="number">31.52853542647338</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LineString</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [<span class="number">105.6005859375</span>, <span class="number">30.65681556429287</span>],</span><br><span class="line">            [<span class="number">107.95166015624999</span>, <span class="number">31.98944183792288</span>],</span><br><span class="line">            [<span class="number">109.3798828125</span>, <span class="number">30.031055426540206</span>],</span><br><span class="line">            [<span class="number">107.7978515625</span>, <span class="number">29.935895213372444</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  线要素就是指线段，记录的是线的端点坐标，可视化时会按照记录顺序联结。</p></li><li><p>MultiLineString</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiLineString"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">105.6005859375</span>, <span class="number">30.65681556429287</span>],</span><br><span class="line">                [<span class="number">107.95166015624999</span>, <span class="number">31.98944183792288</span>],</span><br><span class="line">                [<span class="number">109.3798828125</span>, <span class="number">30.031055426540206</span>],</span><br><span class="line">                [<span class="number">107.7978515625</span>, <span class="number">29.935895213372444</span>]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">109.3798828125</span>, <span class="number">30.031055426540206</span>],</span><br><span class="line">                [<span class="number">107.1978515625</span>, <span class="number">31.235895213372444</span>]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  三维数组，和多边形一样。</p></li><li><p>Polygon</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">106.10595703125</span>, <span class="number">33.33970700424026</span>],</span><br><span class="line">                [<span class="number">106.32568359375</span>, <span class="number">32.41706632846282</span>],</span><br><span class="line">                [<span class="number">108.03955078125</span>, <span class="number">32.2313896627376</span>],</span><br><span class="line">                [<span class="number">108.25927734375</span>, <span class="number">33.15594830078649</span>],</span><br><span class="line">                [<span class="number">106.10595703125</span>, <span class="number">33.33970700424026</span>]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  单个多边形是一个三维数组，可以包含多个二维数组。</p></li><li><p>MultiPolygon</p><ul><li><p>两个不相交的多边形</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">109.2041015625</span>, <span class="number">30.088107753367257</span>],</span><br><span class="line">                    [<span class="number">115.02685546875</span>, <span class="number">30.088107753367257</span>],</span><br><span class="line">                    [<span class="number">115.02685546875</span>, <span class="number">32.7872745269555</span>],</span><br><span class="line">                    [<span class="number">109.2041015625</span>, <span class="number">32.7872745269555</span>],</span><br><span class="line">                    [<span class="number">109.2041015625</span>, <span class="number">30.088107753367257</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">112.9833984375</span>, <span class="number">26.82407078047018</span>],</span><br><span class="line">                    [<span class="number">116.69677734375</span>, <span class="number">26.82407078047018</span>],</span><br><span class="line">                    [<span class="number">116.69677734375</span>, <span class="number">29.036960648558267</span>],</span><br><span class="line">                    [<span class="number">112.9833984375</span>, <span class="number">29.036960648558267</span>],</span><br><span class="line">                    [<span class="number">112.9833984375</span>, <span class="number">26.82407078047018</span>]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个嵌套的多边形</p><p>小的在前面，范围大的在后面，用上4个中括号，但效果不是有洞的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>, <span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>, <span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">27.68352808378776</span>]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>, <span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>, <span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">30.107117887092357</span>]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有孔洞的多边形</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>, <span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>, <span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>, <span class="number">27.68352808378776</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>, <span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>, <span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>, <span class="number">30.107117887092357</span>]</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li>GeometryCollection</li></ol><blockquote><p>GeometryCollection是多种基本地理要素的集合，里面可以包含点、线、面要素。</p></blockquote><p><code>GeometryCollection</code>不需要放在<code>FeatureCollection</code>里：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"GeometryCollection"</span>,</span><br><span class="line"><span class="attr">"geometries"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">            <span class="attr">"coordinates"</span>: [<span class="number">108.62</span>, <span class="number">31.02819</span>]</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">            <span class="attr">"coordinates"</span>: [</span><br><span class="line">                [<span class="number">108.896484375</span>, <span class="number">30.1071178870</span>],</span><br><span class="line">                [<span class="number">108.2184375</span>, <span class="number">30.91717870</span>],</span><br><span class="line">                [<span class="number">109.5184375</span>, <span class="number">31.2175780</span>]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>相关链接</li></ol><ul><li><a href="http://geojson.io" target="_blank" rel="noopener">geojson</a></li></ul><h1 id="JTS-Topology-Suite"><a href="#JTS-Topology-Suite" class="headerlink" title="JTS Topology Suite"></a>JTS Topology Suite</h1><blockquote><p>Java空间分析工具包。JTS是加拿大的Vivid Solutions公司做的一套开源的Java API。它提供了一套空间数据操作的核心算法。主要完成了java对几何对象、空间拓扑的核心操作算法。</p></blockquote><p><img src="https://raw.githubusercontent.com/zkRou/note/master/%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.png" alt="空间数据模型"></p><ol><li>Geometry之间的关系，支持的空间操作包括：</li></ol><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>相等(equals)</td><td>几何形状拓扑上相等，是否有重叠</td></tr><tr><td>分离/脱节(disjoint)</td><td>几何形状没有共有的点</td></tr><tr><td>相交(intersects)</td><td>几何形状至少有一个共有点（区别于脱节）</td></tr><tr><td>接触(touches)</td><td>几何形状至少一个公共的边界点，但是没有内部点</td></tr><tr><td>交叉(crosses)</td><td>几何形状共享一些但不是所有的内部点</td></tr><tr><td>内含(within)</td><td>几何形状A的线都在几何形状B内部</td></tr><tr><td>包含(contains)</td><td>几何形状B的线都在几何形状A内部（区别于内含）</td></tr><tr><td>重叠(overlaps)</td><td>几何形状共享一部分但不是所有的公共点，而且相交处有他们自己相同的区域</td></tr></tbody></table><ol start="2"><li>WKT(Well-known text)</li></ol><blockquote><p>WKT是开放地理空间联盟OGC(Open GIS Consortium)制定的一种文本标记语言，用于表示矢量几何对象、空间参照系统及空间参照系统之间的转换。</p></blockquote><table><thead><tr><th>Type</th><th>WKT</th></tr></thead><tbody><tr><td>Point</td><td>POINT(30 10)</td></tr><tr><td>MultiPoint</td><td>MULTIPOINT ((10 40), (40 30), (20 20), (30 10))</td></tr><tr><td>LineString</td><td>LINESTRING(30 10, 10 30, 40 40)</td></tr><tr><td>MultiLineString</td><td>MULTILINESTRING ((10 10, 20 20, 10 40),(40 40, 30 30, 40 20, 30 10))</td></tr><tr><td>Polygon</td><td>POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))</td></tr><tr><td>MultiPolygon</td><td>MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20)), ((15 5, 40 10, 10 20, 5 10, 15 5)))</td></tr><tr><td>Polygon</td><td>POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))</td></tr><tr><td>MultiPolygon</td><td>MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))</td></tr></tbody></table><ol start="3"><li>WKB(Well-known binary)</li></ol><blockquote><p>WKB是WKT的二进制表示形式，解决了WKT表达方式冗余的问题，便于传输和在数据库中存储相同的信息。</p></blockquote><ol start="4"><li>Demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kris.pointinpolygondemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.*;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.ParseException;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.WKTReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZENGKAIROU583</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeometryRelated</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        equalsGeo();</span><br><span class="line">        disjointGeo();</span><br><span class="line">        intersectsGeo();</span><br><span class="line">        withinGeo(<span class="number">5</span>d,<span class="number">5</span>d,<span class="string">"POLYGON((0 0, 10 0, 10 10, 0 10,0 0))"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GeometryFactory geometryFactory = <span class="keyword">new</span> GeometryFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两个几何对象是否有重叠</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equalsGeo</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader reader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        LineString lineString1 = (LineString) reader.read(<span class="string">"LINESTRING(0 0, 2 0, 5 0)"</span>);</span><br><span class="line">        LineString lineString2 = (LineString) reader.read(<span class="string">"LINESTRING(5 0, 0 0)"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isEquals = lineString1.equals(lineString2);</span><br><span class="line">        System.out.println(isEquals);</span><br><span class="line">        <span class="keyword">return</span> isEquals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 几何对象没有交点(相邻)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">disjointGeo</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader reader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        LineString lineString1 = (LineString) reader.read(<span class="string">"LINESTRING(0 0, 2 0, 5 0)"</span>);</span><br><span class="line">        LineString lineString2 = (LineString) reader.read(<span class="string">"LINESTRING(0 1, 0 2)"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isDisjoint = lineString1.disjoint(lineString2);</span><br><span class="line">        System.out.println(isDisjoint);</span><br><span class="line">        <span class="keyword">return</span> isDisjoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 至少一个公共点(相交)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">intersectsGeo</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader reader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        LineString lineString1 = (LineString) reader.read(<span class="string">"LINESTRING(0 0, 2 0, 5 0)"</span>);</span><br><span class="line">        LineString lineString2 = (LineString) reader.read(<span class="string">"LINESTRING(0 0, 0 2)"</span>);</span><br><span class="line"></span><br><span class="line">        Geometry geometry = lineString1.intersection(lineString2); <span class="comment">//相交点</span></span><br><span class="line">        System.out.println(geometry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isIntersects = lineString1.intersects(lineString2);</span><br><span class="line">        System.out.println(isIntersects);</span><br><span class="line">        <span class="keyword">return</span> isIntersects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断以x、y为坐标的点point(x,y)是否在polygon中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">withinGeo</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, String geometry)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Coordinate coordinate = <span class="keyword">new</span> Coordinate(x, y);</span><br><span class="line">        Point point = geometryFactory.createPoint(coordinate);</span><br><span class="line"></span><br><span class="line">        WKTReader reader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        Polygon polygon = (Polygon) reader.read(geometry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isWithin = point.within(polygon);</span><br><span class="line">        System.out.println(isWithin);</span><br><span class="line">        <span class="keyword">return</span> isWithin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>相关链接：</li></ol><ul><li><a href="https://github.com/locationtech/jts" target="_blank" rel="noopener">jts github</a></li><li><a href="https://locationtech.github.io/jts/" target="_blank" rel="noopener">JTS Topology Suite</a></li></ul><h1 id="Java-geotools"><a href="#Java-geotools" class="headerlink" title="Java geotools"></a>Java geotools</h1><blockquote><p>geotools是一个GIS开源工具包。</p></blockquote><ol><li><p>GeoTools提供了一个<a href="https://docs.geotools.org/latest/userguide/unsupported/geojson.html" target="_blank" rel="noopener">GeoJSON插件</a>，可以将GeoJSON转换为GeoTools特性集合，这些集合的几何元素存储为一个JTS对象。</p></li><li><p>Demo</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kris.pointinpolygondemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.*;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.ParseException;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.WKTReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZENGKAIROU583</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeometryDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=====POINT====="</span>);</span><br><span class="line">        createPoint();</span><br><span class="line">        createPointByWKT();</span><br><span class="line">        createMultiPointByWKT();</span><br><span class="line">        System.out.println(<span class="string">"=====LINE====="</span>);</span><br><span class="line">        createLine();</span><br><span class="line">        createLineByWKT();</span><br><span class="line">        createMultiLine();</span><br><span class="line">        createMultiLineByWKT();</span><br><span class="line">        System.out.println(<span class="string">"=====POLYGON====="</span>);</span><br><span class="line">        createPolygonByWKT();</span><br><span class="line">        createMultiPolygonByWKT();</span><br><span class="line">        System.out.println(<span class="string">"=====GeometryCollection====="</span>);</span><br><span class="line">        createGeometryCollection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GeometryFactory geometryFactory = <span class="keyword">new</span> GeometryFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create a point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Point <span class="title">createPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Coordinate coordinate = <span class="keyword">new</span> Coordinate(<span class="number">109.01</span>, <span class="number">32.123</span>);</span><br><span class="line">        Point point = geometryFactory.createPoint(coordinate);</span><br><span class="line">        System.out.println(point);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create a point by wkt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Point <span class="title">createPointByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader wktReader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        Point point = (Point) wktReader.read(<span class="string">"POINT (109.01 32.123)"</span>);</span><br><span class="line">        System.out.println(point);</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create MultiPoint by wkt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MultiPoint <span class="title">createMultiPointByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader wktReader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        MultiPoint multiPoint = (MultiPoint) wktReader.read(<span class="string">"MULTIPOINT(109.013388 32.715519,119.32488 31.435678)"</span>);</span><br><span class="line">        System.out.println(multiPoint);</span><br><span class="line">        <span class="keyword">return</span> multiPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create a line</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LineString <span class="title">createLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Coordinate[] coordinates = <span class="keyword">new</span> Coordinate[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        LineString line = geometryFactory.createLineString(coordinates);</span><br><span class="line">        System.out.println(line);</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create a line by WKT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LineString <span class="title">createLineByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader reader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        LineString lineString = (LineString) reader.read(<span class="string">"LINESTRING(0 0, 2 0)"</span>);</span><br><span class="line">        System.out.println(lineString);</span><br><span class="line">        <span class="keyword">return</span> lineString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create multiLine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MultiLineString <span class="title">createMultiLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Coordinate[] coordinates1 = <span class="keyword">new</span> Coordinate[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        LineString lineString1 = geometryFactory.createLineString(coordinates1);</span><br><span class="line"></span><br><span class="line">        Coordinate[] coordinates2 = <span class="keyword">new</span> Coordinate[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> Coordinate(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        LineString lineString2 = geometryFactory.createLineString(coordinates2);</span><br><span class="line"></span><br><span class="line">        LineString[] lineStrings = <span class="keyword">new</span> LineString[<span class="number">2</span>];</span><br><span class="line">        lineStrings[<span class="number">0</span>] = lineString1;</span><br><span class="line">        lineStrings[<span class="number">1</span>] = lineString2;</span><br><span class="line">        MultiLineString multiLineString = geometryFactory.createMultiLineString(lineStrings);</span><br><span class="line">        System.out.println(multiLineString);</span><br><span class="line">        <span class="keyword">return</span>  multiLineString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create multiLine by WKT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MultiLineString <span class="title">createMultiLineByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader wktReader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        MultiLineString multiLineString = (MultiLineString) wktReader.read(<span class="string">"MULTILINESTRING((0 0, 2 0),(1 1,2 2))"</span>);</span><br><span class="line">        System.out.println(multiLineString);</span><br><span class="line">        <span class="keyword">return</span> multiLineString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create a polygon by WKT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Polygon <span class="title">createPolygonByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader wktReader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        Polygon polygon = (Polygon) wktReader.read(<span class="string">"POLYGON((20 10, 30 0, 40 10, 30 20, 20 10))"</span>);</span><br><span class="line">        System.out.println(polygon);</span><br><span class="line">        <span class="keyword">return</span> polygon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create multi polygon by WKT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MultiPolygon <span class="title">createMultiPolygonByWKT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        WKTReader wktReader = <span class="keyword">new</span> WKTReader(geometryFactory);</span><br><span class="line">        MultiPolygon multiPolygon = (MultiPolygon) wktReader.read(<span class="string">"MULTIPOLYGON(((40 10, 30 0, 40 10, 30 20, 40 10),(30 10, 30 0, 40 10, 30 20, 30 10)))"</span>);</span><br><span class="line">        System.out.println(multiPolygon);</span><br><span class="line">        <span class="keyword">return</span> multiPolygon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create GeometryCollection contain point or multiPoint or line or multiLine or polygon or multiPolygon</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GeometryCollection <span class="title">createGeometryCollection</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        LineString lineString = createLine();</span><br><span class="line">        Polygon polygon = createPolygonByWKT();</span><br><span class="line"></span><br><span class="line">        Geometry geometry1 = geometryFactory.createGeometry(lineString);</span><br><span class="line">        Geometry geometry2 = geometryFactory.createGeometry(polygon);</span><br><span class="line"></span><br><span class="line">        Geometry[] geometries = <span class="keyword">new</span> Geometry[]&#123;geometry1, geometry2&#125;;</span><br><span class="line">        GeometryCollection geometryCollection = geometryFactory.createGeometryCollection(geometries);</span><br><span class="line">        System.out.println(geometryCollection);</span><br><span class="line">        <span class="keyword">return</span> geometryCollection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>相关链接：</li></ol><ul><li><a href="https://www.geotools.org/" target="_blank" rel="noopener">geotools</a></li><li><a href="https://github.com/geotools/geotools" target="_blank" rel="noopener">geotools github</a></li><li><a href="https://blog.csdn.net/anglestar2012/article/details/42555819" target="_blank" rel="noopener">geotools体系</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Apache POI读写Excel</title>
      <link href="/2019/06/29/Apache%20POI%E8%AF%BB%E5%86%99Excel/"/>
      <url>/2019/06/29/Apache%20POI%E8%AF%BB%E5%86%99Excel/</url>
      <content type="html"><![CDATA[<h1 id="日常记录"><a href="#日常记录" class="headerlink" title="日常记录"></a>日常记录</h1><ul><li>这是一个日常的备忘帖</li><li>读写excel的需求一年总会有这么几次</li></ul><h1 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h1><blockquote><p>是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。</p></blockquote><h1 id="一个经常遇到的异常"><a href="#一个经常遇到的异常" class="headerlink" title="一个经常遇到的异常"></a>一个经常遇到的异常</h1><blockquote><p>org.apache.poi.poifs.filesystem.OfficeXmlFileException: The supplied data appears to be in the Office 2007+ XML. You are calling the part of POI that deals with OLE2 Office Documents. You need to call a different part of POI to process this data (eg XSSF instead of HSSF)</p></blockquote><p>这段异常表示excel版本和workbook的类型不匹配导致的, HSSFWorkbook不支持Excel2007之后的文件版本, poi提供了XSSFWorkbook类型支持后面的版本,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HSSFWorkbook格式用来解析Excel2003（xls）的文件 </span></span><br><span class="line">HSSFWorkbook workbook =  <span class="keyword">new</span> HSSFWorkbook(in);</span><br><span class="line"><span class="comment">//XSSFWorkbook格式用来解析Excel2007（xlsx）的文件 </span></span><br><span class="line">XSSFWorkbook workbook =  <span class="keyword">new</span> XSSFWorkbook(in);</span><br></pre></td></tr></table></figure><p><code>HSSFWorkbook</code>和<code>XSSFWorkbook</code>都实现了<code>Workbook</code>,因此直接使用<code>Workbook</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Workbook workbook = WorkbookFactory.create(in);</span><br></pre></td></tr></table></figure><h1 id="解决POI解析Excel文件版本问题"><a href="#解决POI解析Excel文件版本问题" class="headerlink" title="解决POI解析Excel文件版本问题"></a>解决<code>POI</code>解析Excel文件版本问题</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--APACHE POI--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="读取Excel"><a href="#读取Excel" class="headerlink" title="读取Excel"></a>读取Excel</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pa.stationexcelimport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"H:\\read_excel.xlsx"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读excel文档对象</span></span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        Workbook workbook = WorkbookFactory.create(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取要解析的表格</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);<span class="comment">//第一个表格</span></span><br><span class="line">        <span class="comment">//获得最后一行的行号,没有行或者只有一行的时候返回0</span></span><br><span class="line">        <span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line">        <span class="comment">//遍历每一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lastRowNum; i++)&#123;</span><br><span class="line">            <span class="comment">//获得要解析的行</span></span><br><span class="line">            Row row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//获取最后的单元格号，如果单元格有第一个开始算，lastCellNum就是列的个数</span></span><br><span class="line">            <span class="keyword">int</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lastCellNum; j ++)&#123;</span><br><span class="line">                Cell cell = row.getCell(j);</span><br><span class="line">                <span class="comment">//单元格名称</span></span><br><span class="line">                CellReference cellReference = <span class="keyword">new</span> CellReference(row.getRowNum(), cell.getColumnIndex());</span><br><span class="line">                String cellRefString = cellReference.formatAsString();</span><br><span class="line">                System.out.println(<span class="string">"单元格名称："</span>+cellRefString);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取每个单元格的类型</span></span><br><span class="line">                CellType cellType = cell.getCellType();</span><br><span class="line">                <span class="keyword">if</span>(cellType == CellType.BLANK)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"空格类型"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cellType == CellType.STRING)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"字符串类型"</span>);</span><br><span class="line">                    String value = cell.getStringCellValue();  </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cellType == CellType.NUMERIC)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"数字类型"</span>);</span><br><span class="line">                    <span class="keyword">double</span> value = cell.getNumericCellValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写入Excel"><a href="#写入Excel" class="headerlink" title="写入Excel"></a>写入Excel</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pa.stationexcelimport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"H:\\write_excel.xlsx"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得Excel文件输出流</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        <span class="comment">//创建Excel工作簿对象</span></span><br><span class="line">        XSSFWorkbook xssfWorkbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建Excel页</span></span><br><span class="line">        Sheet sheet = xssfWorkbook.createSheet();</span><br><span class="line">        <span class="comment">//创建行</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建单元格</span></span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//单元格写入内容</span></span><br><span class="line">        cell.setCellValue(<span class="string">"Test"</span>);</span><br><span class="line">        </span><br><span class="line">        xssfWorkbook.write(fileOutputStream);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache POI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring处理请求响应和自定义Response</title>
      <link href="/2019/06/07/Spring%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89Response/"/>
      <url>/2019/06/07/Spring%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89Response/</url>
      <content type="html"><![CDATA[<h1 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h1><p>手头接到一个项目，整个项目接口返回的格式其实都基本一致，因此可以自定义<code>ResponseBody</code>来统一控制层的输出。</p><h1 id="Http请求和响应"><a href="#Http请求和响应" class="headerlink" title="Http请求和响应"></a>Http请求和响应</h1><p>Http请求和响应报文本质上都是一串字符串，当请求报文来到java世界里，它会被封装成为一个<code>ServletInputStream</code>的输入流，供我们读取报文。响应报文则是通过一个<code>ServletOutputStream</code>的输出流，来输出响应报文。在<code>SpringMVC</code>中，<code>HttpMessageConverter</code>机制将输入流/输出流转为java对象。</p><ul><li>HttpMessageConverter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the converted object type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the given class can be read by this converter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz the class to test for readability</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mediaType the media type to read (can be &#123;<span class="doctag">@code</span> null&#125; if not specified);</span></span><br><span class="line"><span class="comment"> * typically the value of a &#123;<span class="doctag">@code</span> Content-Type&#125; header.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if readable; &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="comment">//判断该转换器是否能将请求内容转换为Java对象</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the given class can be written by this converter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz the class to test for writability</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mediaType the media type to write (can be &#123;<span class="doctag">@code</span> null&#125; if not specified);</span></span><br><span class="line"><span class="comment"> * typically the value of an &#123;<span class="doctag">@code</span> Accept&#125; header.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if writable; &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="comment">//判断该转换器是否可以将Java对象转换成返回内容</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the list of &#123;<span class="doctag">@link</span> MediaType&#125; objects supported by this converter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of supported media types</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="comment">//获得该转换器支持的MediaType类型</span></span><br><span class="line"><span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Read an object of the given type from the given input message, and returns it.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz the type of object to return. This type must have previously been passed to the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #canRead canRead&#125; method of this interface, which must have returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputMessage the HTTP input message to read from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the converted object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException in case of I/O errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HttpMessageNotReadableException in case of conversion errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">//读取请求内容并转换成Java对象</span></span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write an given object to the given output message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t the object to write to the output message. The type of this object must have previously been</span></span><br><span class="line"><span class="comment"> * passed to the &#123;<span class="doctag">@link</span> #canWrite canWrite&#125; method of this interface, which must have returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> contentType the content type to use when writing. May be &#123;<span class="doctag">@code</span> null&#125; to indicate that the</span></span><br><span class="line"><span class="comment"> * default content type of the converter must be used. If not &#123;<span class="doctag">@code</span> null&#125;, this media type must have</span></span><br><span class="line"><span class="comment"> * previously been passed to the &#123;<span class="doctag">@link</span> #canWrite canWrite&#125; method of this interface, which must have</span></span><br><span class="line"><span class="comment"> * returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputMessage the message to write to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException in case of I/O errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HttpMessageNotWritableException in case of conversion errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">//将Java对象转换后写入返回内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpMessageConverter</code>对消息转换器最高层次的接口抽象。该类中有成对的<code>canRead()</code>、<code>read()</code>和<code>canWrite()</code>、<code>write()</code>方法，<code>MediaType</code>是对请求的<code>Media Type</code>属性的封装。</p><ul><li>HttpInputMessage</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents an HTTP input message, consisting of &#123;<span class="doctag">@linkplain</span> #getHeaders() headers&#125;</span></span><br><span class="line"><span class="comment"> * and a readable &#123;<span class="doctag">@linkplain</span> #getBody() body&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Typically implemented by an HTTP request handle on the server side,</span></span><br><span class="line"><span class="comment"> * or an HTTP response handle on the client side.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpInputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the body of the message as an input stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the input stream body (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException in case of I/O errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpInputMessage</code>这个类是<code>SpringMVC</code>内部对一次Http请求报文的抽象，在<code>HttpMessageConverter</code>的<code>read()</code>方法中，有一个<code>HttpInputMessage</code>的形参，它正是<code>SpringMVC</code>的消息转换器所作用的受体“请求消息”的内部抽象，消息转换器从”请求消息”中按照规则提取信息，转换为方法形参中声明的对象。</p><ul><li>HttpOutputMessage</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents an HTTP output message, consisting of &#123;<span class="doctag">@linkplain</span> #getHeaders() headers&#125;</span></span><br><span class="line"><span class="comment"> * and a writable &#123;<span class="doctag">@linkplain</span> #getBody() body&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Typically implemented by an HTTP request handle on the client side,</span></span><br><span class="line"><span class="comment"> * or an HTTP response handle on the server side.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpOutputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the body of the message as an output stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the output stream body (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException in case of I/O errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">OutputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpOutputMessage</code>这个类是<code>SpringMVC</code>内部对一次Http响应报文的抽象，在<code>HttpMessageConverter</code>的<code>write()</code>方法中，有一个<code>HttpOutputMessage</code>的形参，它正是<code>SpringMVC</code>的消息转换器所作用的受体“响应消息”的内容抽象，消息转换器将“响应消息”按照一定的规则写到响应报文中。</p><h1 id="请求、响应过程"><a href="#请求、响应过程" class="headerlink" title="请求、响应过程"></a>请求、响应过程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/string"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readString</span><span class="params">(@RequestBody String string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Read string '"</span> + string + <span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>请求</p><p>  请求报文 -&gt; HttpInputMessage -&gt; HttpMessageConverter -&gt; java对象 -&gt; SpringMVC</p><ol><li>进入<code>readString()</code>方法前，根据<code>@RequestBody</code>注解选择适当的<code>HttpMessageConverter</code>实现类将请求参数解析到string变量中，具体来说是使用了<code>StringHttpMessageConverter</code>类，它的<code>canRead()</code>方法返回true;</li><li>它的<code>read()</code>方法会从请求中读出请求参数，绑定到<code>readString()</code>方法的string变量中。</li></ol></li><li><p>响应</p><p>  SpringMVC -&gt; java对象 -&gt; HttpMessageConverter -&gt; HttpOutputMessage -&gt; 响应报文</p><ol><li>当<code>readString()</code>执行后，由于返回值标识了<code>@ResponseBody</code>，<code>SpringMVC</code>将使用<code>StringHttpMessageConverter</code>的<code>write()</code>方法，将结果作为String值写入响应报文中，此时它的<code>canWrite()</code>方法返回true。 </li></ol></li></ul><h1 id="RequestResponseBodyMethodProcessor"><a href="#RequestResponseBodyMethodProcessor" class="headerlink" title="RequestResponseBodyMethodProcessor"></a>RequestResponseBodyMethodProcessor</h1><p>这个类同时实现了<code>HandlerMethodArgumentResolver</code>(将请求报文绑定到处理方法形参的策略接口)和<code>HandlerMethodReturnValueHandler</code>(对处理方法返回值进行处理的策略接口)两个接口。</p><p><code>HandlerMethodArgumentResolver</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.method.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Strategy interface for resolving method parameters into argument values in</span></span><br><span class="line"><span class="comment"> * the context of a given request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HandlerMethodReturnValueHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether the given &#123;<span class="doctag">@linkplain</span> MethodParameter method parameter&#125; is</span></span><br><span class="line"><span class="comment"> * supported by this resolver.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameter the method parameter to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this resolver supports the supplied parameter;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolves a method parameter into an argument value from a given request.</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> ModelAndViewContainer&#125; provides access to the model for the</span></span><br><span class="line"><span class="comment"> * request. A &#123;<span class="doctag">@link</span> WebDataBinderFactory&#125; provides a way to create</span></span><br><span class="line"><span class="comment"> * a &#123;<span class="doctag">@link</span> WebDataBinder&#125; instance when needed for data binding and</span></span><br><span class="line"><span class="comment"> * type conversion purposes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameter the method parameter to resolve. This parameter must</span></span><br><span class="line"><span class="comment"> * have previously been passed to &#123;<span class="doctag">@link</span> #supportsParameter&#125; which must</span></span><br><span class="line"><span class="comment"> * have returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mavContainer the ModelAndViewContainer for the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> webRequest the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binderFactory a factory for creating &#123;<span class="doctag">@link</span> WebDataBinder&#125; instances</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resolved argument value, or &#123;<span class="doctag">@code</span> null&#125; if not resolvable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of errors with the preparation of argument values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>HandlerMethodArgumentResolver</code>接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parameter.hasParameterAnnotation(RequestBody.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">        NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    parameter = parameter.nestedIfOptional();</span><br><span class="line">    Object arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">    String name = Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (binderFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line">        <span class="keyword">if</span> (arg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            validateIfApplicable(binder, parameter);</span><br><span class="line">            <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentNotValidException(parameter, binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mavContainer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.method.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Strategy interface to handle the value returned from the invocation of a</span></span><br><span class="line"><span class="comment"> * handler method .</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HandlerMethodArgumentResolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether the given &#123;<span class="doctag">@linkplain</span> MethodParameter method return type&#125; is</span></span><br><span class="line"><span class="comment"> * supported by this handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the method return type to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this handler supports the supplied return type;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle the given return value by adding attributes to the model and</span></span><br><span class="line"><span class="comment"> * setting a view or setting the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ModelAndViewContainer#setRequestHandled&#125; flag to &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * to indicate the response has been handled directly.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnValue the value returned from the handler method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the type of the return value. This type must have</span></span><br><span class="line"><span class="comment"> * previously been passed to &#123;<span class="doctag">@link</span> #supportsReturnType&#125; which must</span></span><br><span class="line"><span class="comment"> * have returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mavContainer the ModelAndViewContainer for the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> webRequest the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the return value handling results in an error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(@Nullable Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>HandlerMethodReturnValueHandler</code>的接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) ||</span><br><span class="line">            returnType.hasMethodAnnotation(ResponseBody.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(@Nullable Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">    ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">    ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义-Response实现"><a href="#自定义-Response实现" class="headerlink" title="自定义@Response实现"></a>自定义<code>@Response</code>实现</h1><ol><li>定义一个注解类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了更方便返回统一的JSON格式而自定义的注解</span></span><br><span class="line"><span class="comment"> * 作用类似于&#123;<span class="doctag">@link</span> org.springframework.web.bind.annotation.ResponseBody&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResultResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个类，继承<code>RequestResponseBodyProcessor</code>，并重写<code>supportsReturnType(MethodParameter returnType)</code>方法和<code>handleReturnValue</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.szfgw.IntelligentSite.bean.vo.ResponseVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.HttpMediaTypeNotAcceptableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结合&#123;<span class="doctag">@link</span> ResultResponseBody&#125;包装处理返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultResponseHandlerMethodProcessor</span> <span class="keyword">extends</span> <span class="title">RequestResponseBodyMethodProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultResponseHandlerMethodProcessor</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(converters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> returnType.getMethodAnnotation(ResultResponseBody.class) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleReturnValue(<span class="keyword">new</span> ResponseVO(returnValue), returnType, mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实现接口<code>WebMvcConfigurer</code>的<code>addReturnValueHandlers</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.szfgw.IntelligentSite.utils.ResultResponseHandlerMethodProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodReturnValueHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebMvcConfig</span><span class="params">(MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappingJackson2HttpMessageConverter = mappingJackson2HttpMessageConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = mappingJackson2HttpMessageConverter.getObjectMapper();</span><br><span class="line">        objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line">        objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);</span><br><span class="line">        handlers.add(<span class="keyword">new</span> ResultResponseHandlerMethodProcessor(Collections.singletonList(mappingJackson2HttpMessageConverter)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>AbstractRoutingDataSource+AOP动态数据源切换</title>
      <link href="/2019/05/24/AbstractRoutingDataSource+AOP%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
      <url>/2019/05/24/AbstractRoutingDataSource+AOP%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h1><p>项目开发过程中，出现一个项目需要连接多个不同数据源的情况，最近加入的一个新的项目发现使用<code>AbstractRoutingDataSource</code>结合<code>AOP</code>利用<code>ThreadLocal</code>（每一个线程都可以独立改变自己的副本，而不会影响其他线程所对应的副本）的方式可以实现动态数据源切换，因此学习一下。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>定义一个类，继承<code>AbstractRoutingDataSource</code>并重写<code>determineCurrentLookupKey()</code>方法</li><li>定义切面类（具体怎么切可以自己定义）</li><li>定义多个<code>DataSource</code>，并注入到<code>SqlSessionFactory</code>，指定<code>@Mapper</code>的<code>sqlSessionFactoryRef</code></li><li>定义数据源的名称常量类，并使用<code>ThreadLocal</code>定义一个获取和设置上下文环境的类，负责改变上下文数据源的名称</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>请移步至<a href="https://github.com/zkRou/abstract-routing-data-source-demo" target="_blank" rel="noopener">GitHub</a></p><h1 id="相关类剖析"><a href="#相关类剖析" class="headerlink" title="相关类剖析"></a>相关类剖析</h1><h2 id="AbstractRoutingDataSource分析"><a href="#AbstractRoutingDataSource分析" class="headerlink" title="AbstractRoutingDataSource分析"></a>AbstractRoutingDataSource分析</h2><ul><li>在<code>org.springframework.jdbc.datasource.lookup</code>包中</li><li>继承了<code>AbstractDataSource</code>类，而<code>AbstractDataSource</code>类实现了<code>DataSource</code>接口</li><li>获取连接的方法中，<code>determineTargetDataSource()</code>方法是关键，而该方法中<code>determineCurrentLookupKey()</code>方法是关键</li><li>继承该类，重写<code>determineCurrentLookupKey()</code>方法，该方法返回所要用的数据源dataSource的key值，应用根据key来动态切换到真正的<code>DataSource</code>上，来实现数据源的切换。<code>resolvedDataSource</code>的<code>Map</code>，存储了多个<code>DataSource</code>，如果没有指定的那个key，就会使用默认的<code>DefaultDataSource</code>，返回默认的<code>DataSource</code></li><li>类图：</li></ul><p><img src="https://raw.githubusercontent.com/zkRou/note/master/AbstractRoutingDataSource-class-diagram.PNG" alt="AbstractRoutingDataSource类图"></p><ul><li>源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract &#123;<span class="doctag">@link</span> javax.sql.DataSource&#125; implementation that routes &#123;<span class="doctag">@link</span> #getConnection()&#125;</span></span><br><span class="line"><span class="comment"> * calls to one of various target DataSources based on a lookup key. The latter is usually</span></span><br><span class="line"><span class="comment"> * (but not necessarily) determined through some thread-bound transaction context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setTargetDataSources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setDefaultTargetDataSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #determineCurrentLookupKey()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSource</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Object, Object&gt; targetDataSources;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object defaultTargetDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> lenientFallback = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DataSourceLookup dataSourceLookup = <span class="keyword">new</span> JndiDataSourceLookup();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Object, DataSource&gt; resolvedDataSources;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> DataSource resolvedDefaultDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Specify the map of target DataSources, with the lookup key as key.</span></span><br><span class="line"><span class="comment"> * The mapped value can either be a corresponding &#123;<span class="doctag">@link</span> javax.sql.DataSource&#125;</span></span><br><span class="line"><span class="comment"> * instance or a data source name String (to be resolved via a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #setDataSourceLookup DataSourceLookup&#125;).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The key can be of arbitrary type; this class implements the</span></span><br><span class="line"><span class="comment"> * generic lookup process only. The concrete key representation will</span></span><br><span class="line"><span class="comment"> * be handled by &#123;<span class="doctag">@link</span> #resolveSpecifiedLookupKey(Object)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #determineCurrentLookupKey()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//调用setTargetDataSources()方法把Map填进去</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetDataSources</span><span class="params">(Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.targetDataSources = targetDataSources;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Specify the default target DataSource, if any.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The mapped value can either be a corresponding &#123;<span class="doctag">@link</span> javax.sql.DataSource&#125;</span></span><br><span class="line"><span class="comment"> * instance or a data source name String (to be resolved via a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #setDataSourceLookup DataSourceLookup&#125;).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This DataSource will be used as target if none of the keyed</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #setTargetDataSources targetDataSources&#125; match the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #determineCurrentLookupKey()&#125; current lookup key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//setDefaultTargetDataSource()方法吧DefaultDataSource设置好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultTargetDataSource</span><span class="params">(Object defaultTargetDataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.defaultTargetDataSource = defaultTargetDataSource;</span><br><span class="line">&#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve the current target DataSource. Determines the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #determineCurrentLookupKey() current lookup key&#125;, performs</span></span><br><span class="line"><span class="comment"> * a lookup in the &#123;<span class="doctag">@link</span> #setTargetDataSources targetDataSources&#125; map,</span></span><br><span class="line"><span class="comment"> * falls back to the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #setDefaultTargetDataSource default target DataSource&#125; if necessary.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #determineCurrentLookupKey()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">"DataSource router not initialized"</span>);</span><br><span class="line">Object lookupKey = determineCurrentLookupKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从resolvedDataSources取出对应key的DataSource，如果找不到就用默认的数据源</span></span><br><span class="line">DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot determine target DataSource for lookup key ["</span> + lookupKey + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine the current lookup key. This will typically be</span></span><br><span class="line"><span class="comment"> * implemented to check a thread-bound transaction context.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Allows for arbitrary keys. The returned key needs</span></span><br><span class="line"><span class="comment"> * to match the stored lookup key type, as resolved by the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #resolveSpecifiedLookupKey&#125; method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="DataSourceBuilder"><a href="#DataSourceBuilder" class="headerlink" title="DataSourceBuilder"></a>DataSourceBuilder</h2><ul><li>在<code>org.springframework.boot.jdbc</code>包中</li><li>方便构建自定义的<code>DataSource</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span></span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">DataSourceBuilder builder = DataSourceBuilder.create();</span><br><span class="line">builder.driverClassName(<span class="string">"org.hr.Driver"</span>);</span><br><span class="line">builder.url(<span class="string">"jdbc:h2:mem:test"</span>);</span><br><span class="line">builder.username(<span class="string">"username"</span>);</span><br><span class="line">builder.password(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或，使用<code>application.properties</code>文件外部化<code>DataSource</code>配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">DataSourceBuilder builder = DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.propertites</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url = jdbc:h2:mem:test</span><br><span class="line">spring.datasource.driver-class-name = org.h2.Driver</span><br><span class="line">spring.datasource.name = username</span><br><span class="line">spring.datasource.password = password</span><br></pre></td></tr></table></figure><ul><li>类图：</li></ul><p><img src="https://raw.githubusercontent.com/zkRou/note/master/DataSourceBuilder-class-diagram.PNG" alt="DataSourceBuilder-class-diagram类图"></p><h2 id="DataSource数据源"><a href="#DataSource数据源" class="headerlink" title="DataSource数据源"></a>DataSource数据源</h2><ul><li>在<code>javax.sql</code>包中，JDBC 2.0 API 中的新增内容。作为<code>DriverManager</code>工具的替代项，使用<code>DataSource</code>对象是连接到数据源的首选方法</li><li>负责建立与数据库的连接，获取连接</li><li>传统JDBC的工作流：<ul><li>加载数据库驱动程序(Mysql,SQL Server等)</li><li>通过<code>DriverManager</code>获取<code>Connection</code>对象</li><li>获取<code>Statement</code>对象</li><li>执行SQL语句</li><li>得到操作结果集<code>ResultSet</code></li><li>关闭资源</li></ul></li><li>当使用<code>Spring Boot</code>并且使用<code>Spring Boot</code>默认的数据库配置时，<code>Spring Boot</code>的<code>DataSource</code>会自动配置，完成所有重型基础设施管道。这包括<code>H2 DataSource</code>实现，该实现将由<code>HikariCP</code>、<code>Apache Tomcat</code>或<code>Commons DBCP</code>自动处理，并设置内存数据库实例。此外，我们甚至不需要创建<code>application.properties</code>文件，因为<code>Spring Boot</code>也会提供一些默认的数据库设置。</li><li>类图：</li></ul><p><img src="https://raw.githubusercontent.com/zkRou/note/master/DataSource-class-diagram.PNG" alt="DataSource类图"></p><ul><li>源码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSource</span>  <span class="keyword">extends</span> <span class="title">CommonDataSource</span>, <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><ul><li>在<code>org.apache.ibatis.session</code>包中</li><li><code>SqlSession</code>是<code>Mybatis</code>最重要的构建之一，通过<code>SqlSession</code>可以实现增删改查</li><li>生命周期是存在于请求数据库处理事务的过程中，是一个非线程安全的对象，即存活于一个应用的请求和申请，可以执行多条SQL保证事务的一致性</li></ul><h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><ul><li>在<code>org.apache.ibatis.session</code>包中</li><li><code>SqlSessionFactory</code>的作用是创建<code>SqlSession</code>，而<code>SqlSession</code>相当于JDBC的一个Connection对象，每次应用程序需要访问数据库，就要通过<code>SqlSessionFactory</code>创建一个<code>SqlSession</code>，所以<code>SqlSessionFactory</code>在整个Mybatis整个生命周期中（每个数据库对应一个<code>SqlSessionFactory</code>，是单例产生的）</li></ul><h2 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h2><ul><li>在<code>org.apache.ibatis.session</code>包中</li><li>作用就是创建一个构建器，一旦创建了<code>SqlSessionFactory</code>，它的任务就完成了，可以回收</li></ul><h2 id="SqlSessionFactoryBean"><a href="#SqlSessionFactoryBean" class="headerlink" title="SqlSessionFactoryBean"></a>SqlSessionFactoryBean</h2><ul><li>在<code>org.mybatis.spring</code>包中</li><li><p>在基本的<code>Mybatis</code>中，<code>SqlSessionFactory</code>可以使用<code>SqlSessionFactoryBuilder</code>来创建，而<code>mybatis-spring</code>则使用<code>SqlSessionFactoryBean</code>来创建</p><ul><li><p>XML配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mappers/**/*.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Java方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">sqlSessionFactoryBean.setMapperLocations(resolver.getResource(<span class="string">"classpath*:mybatis/mappers/*.xml"</span>));</span><br><span class="line">SqlSessionFactory sessionFactory = sqlSessionFactoryBean.getObject();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类图：</p></li></ul><p><img src="https://raw.githubusercontent.com/zkRou/note/master/SqlSessionFactoryBean-class-diagram.PNG" alt="SqlSessionFactoryBean类图"></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://www.baeldung.com/spring-abstract-routing-data-source" target="_blank" rel="noopener">A Guide to Spring AbstractRoutingDatasource</a></p>]]></content>
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring-retry重试机制</title>
      <link href="/2019/02/01/spring-retry/"/>
      <url>/2019/02/01/spring-retry/</url>
      <content type="html"><![CDATA[<h2 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h2><p><code>spring retry</code>是从<code>spring batch</code>独立出来的一个功能，主要实现了重试和熔断，提供了自动并重复调用操作执行失败的能力。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>调用第三方接口或消息队列及一些网络抖动、连接超时等网络异常，此时就需要重试。（区块链中提交交易发生失败时，也可以考虑用重试机制，降低服务接入方交易失败的概率）使程序/接口更健壮。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring retry</code>用到了aspect增强，因此可能需要引入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p><strong>@EnableRetry</strong>：开启retry的拦截，一般在启动类（如：Application.java）上注解</p><p><strong>@Retryable</strong>：注解在需要重试的方法上，被注解的方法发生异常时会重试，参数说明：</p><ul><li><p>value：抛出指定的异常才会重试，默认为空</p></li><li><p>include：和value一样，默认为空，当exclude也为空时，所有异常都重试</p></li><li><p>exclude：指定异常不重试，默认为空，当include也为空时，所有异常都重试</p></li><li><p>maxAttempts：最大尝试次数，默认3次</p></li><li><p>backoff：重试等待策略，默认使用@Backoff：</p><ul><li><p>delay(等同于value)-指定延迟后重试，默认为1000L，<br>当未设置multiplier时，表示每隔delay的时间重试，直到重试次数到达maxAttempts设置的最大允许重试次数，<br>当设置了multiplier参数时，该值作为幂运算的初始值（delay = delay * multiplier）；</p></li><li><p>multiplier-指定延迟倍数，默认为0，表示固定暂停1秒后进行重试。比如delay=5000L,multiplier=2时，第一次重试为5秒后，第二次为10秒，第三次为20秒。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retryable</span>(</span><br><span class="line">      value = &#123;SQLException.class&#125;, </span><br><span class="line">      maxAttempts = <span class="number">2</span>,</span><br><span class="line">      backoff = <span class="meta">@Backoff</span>(delay = <span class="number">5000L</span>, multiplier=<span class="number">1.5</span>)</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p><strong>@Recover</strong>：用于<code>@Retryable</code>重试失败后的处理方法。当重试到达指定次数时，被注解的方法被回调，但需要注意只有入参类型和发生异常的类型一致时才会回调。</p><h3 id="关键API"><a href="#关键API" class="headerlink" title="关键API"></a>关键API</h3><ul><li><strong>RetryTemplate</strong>：<code>RetryTemplate</code>实现了<code>RetryOperations</code>接口，简化了操作。重试操作被封装在<code>RetryCallback</code>接口的实现中，并使用提供的其中一种<code>execute()</code>方法执行。</li></ul><p>基本回调是一个简单的接口，允许插入一些需要重试的业务逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RetryCallback</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">doWithRetry</span><span class="params">(RetryContext context)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RetryOperations</code>最简单的通用实现是<code>RetryTemplate</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RetryTemplate template = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line"></span><br><span class="line">TimeoutRetryPolicy policy = <span class="keyword">new</span> TimeoutRetryPolicy();</span><br><span class="line">policy.setTimeout(<span class="number">30000L</span>);</span><br><span class="line"></span><br><span class="line">template.setRetryPolicy(policy);</span><br><span class="line"></span><br><span class="line">Foo result = template.execute(<span class="keyword">new</span> RetryCallback&lt;Foo&gt;()&#123;</span><br><span class="line">    <span class="function">publicFoo <span class="title">doWithRetry</span><span class="params">(RetryContext context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//一些会出错的操作</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>RetryContext</strong>：是<code>RetryCallback</code>的方法参数。许多回调只会忽略上下文，可以将其用作属性包，以便在迭代期间存储数据。如果在同一线程中正在进行嵌套重试，则<code>RetryContext</code>将具有父上下文。父上下文有时用于存储需要在要执行的调用之间共享的数据。</p></li><li><p><strong>RecoveryCallback</strong>：当重试耗尽时，<code>RetryOperations</code>可以将控制权传递给另一个回调，即<code>RecoveryCallback</code>。例如，要使用此特性，客户端只需将回调一起传递到相同的方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Foo foo = template.execute(<span class="keyword">new</span> RetryCallback&lt;Foo&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">doWithRetry</span><span class="params">(RetryContext context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//business login here</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">new</span> RecoveryCallback&lt;Foo&gt;()&#123;</span><br><span class="line">        <span class="function">Foo <span class="title">recover</span><span class="params">(RetryContext context)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            <span class="comment">//recover login here</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>RetryOperations</strong>：定义实现的基本的重试操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.retry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.support.DefaultRetryState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RetryOperations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&lt;T, E extends Throwable&gt; <span class="function">T <span class="title">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback)</span> <span class="keyword">throws</span> E</span>;</span><br><span class="line"></span><br><span class="line">&lt;T, E extends Throwable&gt; <span class="function">T <span class="title">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RecoveryCallback&lt;T&gt; recoveryCallback)</span> <span class="keyword">throws</span> E</span>;</span><br><span class="line"></span><br><span class="line">&lt;T, E extends Throwable&gt; <span class="function">T <span class="title">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RetryState retryState)</span> <span class="keyword">throws</span> E, ExhaustedRetryException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T, E extends Throwable&gt; <span class="function">T <span class="title">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RecoveryCallback&lt;T&gt; recoveryCallback, RetryState retryState)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> E</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>RetryCallback</strong>：<code>RecoveryCallback</code>是<code>execute()</code>的一个参数，它是一个接口，允许插入在失败时需要重试的业务逻辑。</p><ul><li><p>Configure a <code>RetryTemplate</code> bean in <code>@Configuration</code> class：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line"></span><br><span class="line">        FixedBackOffPolicy fixedBackOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        fixedBackOffPolicy.setBackOffPeriod(<span class="number">2000L</span>);</span><br><span class="line">        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);</span><br><span class="line"></span><br><span class="line">        SimpleRetryPolicy retryPolicy = <span class="keyword">new</span> SimpleRetryPolicy();</span><br><span class="line">        retryPolicy.setMaxAttempts(<span class="number">2</span>);</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>RetryPolicy</code>决定了重试操作的时间。<code>SimpleRetryPolicy</code>用来固定次数的重试。</p><p>  <code>BackOffPolicy</code>用于控制重试之间的间隔。<code>FixedBackOffPolicy</code>会在继续之前暂停一段固定的时间。</p></li><li><p>Using the <code>RetryTemplate</code></p><p>  要运行带有重试处理的代码，我们调用retryTemplate.execute():</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">retryTemplate.execute(<span class="keyword">new</span> RetryCallback&lt;Void, RuntimeException&gt;()&#123;</span><br><span class="line">    <span class="meta">@Overrid</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWithRetry</span><span class="params">(RetryContext arg0)</span></span>&#123;</span><br><span class="line">        myService.templateRetryService();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或使用lambda表达式</span></span><br><span class="line">retryTemplate.execute(arg0 -&gt; &#123;</span><br><span class="line">    myService.templateRetryService();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>BackoffPolicy</strong>：在暂时失败后重试时，在重试之前等待一段时间通常会有所帮助，因为失败通常是由一些问题引起的，而这些问题只能通过等待来解决。如果RetryCallback失败，RetryTemplate可以根据适当的BackoffPolicy暂停执行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BackoffPolicy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">BackOffContext <span class="title">start</span><span class="params">(RetryContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backOff</span><span class="params">(BackOffContext backOffContext)</span> <span class="keyword">throws</span> BackOffInterruptedException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>backOff策略可以自由地以其选择的任何方式实现该backoff。一个常用的用例是，以指数增长的等待时间进行回退，以避免两次重试进入相同的锁定步骤，但都失败了。为此，<code>Spring Batch</code>提供<code>ExponentialBackoffPolicy</code>策略。</p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p><code>@EnableRetry</code>开启重试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.EnableRetry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringRetryDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Retryable</code>用于需要重试的业务，<code>@Recover</code>用于重试操作失败的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.Backoff;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.Recover;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.Retryable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryTestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryTimes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable</span>(value = Exception.class, maxAttempts = <span class="number">3</span>, backoff = <span class="meta">@Backoff</span>(delay = <span class="number">2000L</span>, multiplier = <span class="number">1.5</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        retryTimes = retryTimes + <span class="number">1</span>;</span><br><span class="line">        log.info(<span class="string">"开始第&#123;&#125;次"</span>, retryTimes);</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"num值有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"结束：&#123;&#125;"</span>, LocalTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        log.warn(<span class="string">"重试操作失败,共执行&#123;&#125;次"</span>, retryTimes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kris.springretrydemo.service.RetryTestService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RetryTestService retryTestService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retryTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">retryTestService.retry(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始第1次</span><br><span class="line">开始第2次</span><br><span class="line">开始第3次</span><br><span class="line">重试操作失败,共执行3次</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/spring-projects/spring-retry" target="_blank" rel="noopener">spring-retry官方项目github</a><br><a href="https://docs.spring.io/spring-batch/trunk/reference/html/retry.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-retry </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bug记录 - NoSuchMethodError:okhttp</title>
      <link href="/2019/01/28/bug-NoSuchMethodError_okhttp/"/>
      <url>/2019/01/28/bug-NoSuchMethodError_okhttp/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>某天，从项目日志看到报了如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">GlobalException:org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: okio.BufferedSource.rangeEquals(JLokio/ByteString;)Z</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1053</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">942</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">998</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:<span class="number">901</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">660</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">875</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">741</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">231</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>) [tomcat-embed-websocket-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:<span class="number">90</span>) [spring-boot-actuator-<span class="number">2.1</span>.0.RELEASE.jar:<span class="number">2.1</span>.0.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">99</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">92</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:<span class="number">93</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.cloud.sleuth.instrument.web.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:<span class="number">48</span>) [spring-cloud-sleuth-core-<span class="number">2.0</span>.2.RELEASE.jar:<span class="number">2.0</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at brave.servlet.TracingFilter.doFilter(TracingFilter.java:<span class="number">86</span>) [brave-instrumentation-servlet-<span class="number">5.4</span>.3.jar:na]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:<span class="number">154</span>) [spring-boot-actuator-<span class="number">2.1</span>.0.RELEASE.jar:<span class="number">2.1</span>.0.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:<span class="number">122</span>) [spring-boot-actuator-<span class="number">2.1</span>.0.RELEASE.jar:<span class="number">2.1</span>.0.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">107</span>) [spring-boot-actuator-<span class="number">2.1</span>.0.RELEASE.jar:<span class="number">2.1</span>.0.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">200</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">199</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">96</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">490</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">139</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">74</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">343</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">408</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">66</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">770</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1415</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) [na:<span class="number">1.8</span>.0_192]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) [na:<span class="number">1.8</span>.0_192]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span>.12.jar:<span class="number">9.0</span>.12]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [na:<span class="number">1.8</span>.0_192]</span><br><span class="line">Caused by: java.lang.NoSuchMethodError: okio.BufferedSource.rangeEquals(JLokio/ByteString;)Z</span><br><span class="line">at okhttp3.internal.Util.bomAwareCharset(Util.java:<span class="number">431</span>) ~[okhttp-<span class="number">3.8</span>.1.jar:na]</span><br><span class="line">at okhttp3.ResponseBody$BomAwareReader.read(ResponseBody.java:<span class="number">249</span>) ~[okhttp-<span class="number">3.8</span>.1.jar:na]</span><br><span class="line">at com.google.gson.stream.JsonReader.fillBuffer(JsonReader.java:<span class="number">1295</span>) ~[gson-<span class="number">2.8</span>.5.jar:na]</span><br><span class="line">at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:<span class="number">1333</span>) ~[gson-<span class="number">2.8</span>.5.jar:na]</span><br><span class="line">at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:<span class="number">549</span>) ~[gson-<span class="number">2.8</span>.5.jar:na]</span><br><span class="line">at com.google.gson.stream.JsonReader.peek(JsonReader.java:<span class="number">425</span>) ~[gson-<span class="number">2.8</span>.5.jar:na]</span><br><span class="line">at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:<span class="number">207</span>) ~[gson-<span class="number">2.8</span>.5.jar:na]</span><br><span class="line">at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:<span class="number">39</span>) ~[converter-gson-<span class="number">2.4</span>.0.jar:na]</span><br><span class="line">at retrofit2.converter.gson.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:<span class="number">27</span>) ~[converter-gson-<span class="number">2.4</span>.0.jar:na]</span><br><span class="line">at retrofit2.ServiceMethod.toResponse(ServiceMethod.java:<span class="number">122</span>) ~[retrofit-<span class="number">2.4</span>.0.jar:na]</span><br><span class="line">at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:<span class="number">217</span>) ~[retrofit-<span class="number">2.4</span>.0.jar:na]</span><br><span class="line">at retrofit2.OkHttpCall.execute(OkHttpCall.java:<span class="number">180</span>) ~[retrofit-<span class="number">2.4</span>.0.jar:na]</span><br><span class="line">at com.kingdee.kchain.fabric.ca.CaTemplate.callForResult(CaTemplate.java:<span class="number">110</span>) ~[fabric-ca-sdk-<span class="number">1.2</span>.0.M10.jar:na]</span><br><span class="line">at com.kingdee.kchain.fabric.ca.CaTemplate.enroll(CaTemplate.java:<span class="number">76</span>) ~[fabric-ca-sdk-<span class="number">1.2</span>.0.M10.jar:na]</span><br><span class="line">at com.kingdee.kchain.fabric.ca.CaTemplate.&lt;init&gt;(CaTemplate.java:<span class="number">44</span>) ~[fabric-ca-sdk-<span class="number">1.2</span>.0.M10.jar:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.config.CaConfig.lambda$getCaTemplate$<span class="number">0</span>(CaConfig.java:<span class="number">32</span>) ~[classes/:na]</span><br><span class="line">at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:<span class="number">1660</span>) ~[na:<span class="number">1.8</span>.0_192]</span><br><span class="line">at com.kingdee.kchain.usersystem.config.CaConfig.getCaTemplate(CaConfig.java:<span class="number">29</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.CaService.caUserRegisterAndEnroll(CaService.java:<span class="number">58</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.CaService.newUserCa(CaService.java:<span class="number">91</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService.newDefauleUserCa(KdUserService.java:<span class="number">316</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService.newUserFromKdUser(KdUserService.java:<span class="number">303</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService.kdUserActivate(KdUserService.java:<span class="number">132</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService.kdCloudLogin(KdUserService.java:<span class="number">81</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService$$FastClassBySpringCGLIB$$<span class="number">36f</span>547ee.invoke(&lt;generated&gt;) ~[classes/:na]</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>) ~[spring-core-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:<span class="number">746</span>) ~[spring-aop-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">163</span>) ~[spring-aop-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:<span class="number">119</span>) ~[spring-context-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>) ~[spring-aop-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">688</span>) ~[spring-aop-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at com.kingdee.kchain.usersystem.service.KdUserService$$EnhancerBySpringCGLIB$$<span class="number">76723</span>ce.kdCloudLogin(&lt;generated&gt;) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.usersystem.web.KdUserController.kdCloudLogin(KdUserController.java:<span class="number">35</span>) ~[classes/:na]</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor194.invoke(Unknown Source) ~[na:na]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_192]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[na:<span class="number">1.8</span>.0_192]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">215</span>) ~[spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">142</span>) ~[spring-web-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">102</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">800</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1038</span>) ~[spring-webmvc-<span class="number">5.1</span>.2.RELEASE.jar:<span class="number">5.1</span>.2.RELEASE]</span><br><span class="line">... <span class="number">59</span> common frames omitted</span><br></pre></td></tr></table></figure><p>okio报的NoSuchMethodError的错误，想起来前两个星期也刚刚遇到了类似的问题，当时是因为fabric-ca-sdk中引入的okhttp的version为3.8.1，后将okhttp升级到3.12.0后解决该问题。</p><p>专门去另个一个项目里将错误重现出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: okhttp3.HttpUrl.get(Ljava/lang/String;)Lokhttp3/HttpUrl;</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1053</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">942</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1005</span>) [spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:<span class="number">908</span>) [spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">660</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">882</span>) [spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">741</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">231</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>) [tomcat-embed-websocket-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:<span class="number">90</span>) [spring-boot-actuator-<span class="number">2.1</span>.2.RELEASE.jar:<span class="number">2.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">99</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">92</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:<span class="number">93</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.cloud.sleuth.instrument.web.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:<span class="number">48</span>) [spring-cloud-sleuth-core-<span class="number">2.0</span>.2.RELEASE.jar:<span class="number">2.0</span>.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at brave.servlet.TracingFilter.doFilter(TracingFilter.java:<span class="number">86</span>) [brave-instrumentation-servlet-<span class="number">5.4</span>.3.jar:na]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:<span class="number">117</span>) [spring-boot-actuator-<span class="number">2.1</span>.2.RELEASE.jar:<span class="number">2.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">106</span>) [spring-boot-actuator-<span class="number">2.1</span>.2.RELEASE.jar:<span class="number">2.1</span>.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">200</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">107</span>) [spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">199</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">96</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">490</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">139</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">74</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">343</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">408</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">66</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">834</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1417</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>) [na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>) [na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span>.14.jar:<span class="number">9.0</span>.14]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.8</span>.0_73]</span><br><span class="line">Caused by: java.lang.NoSuchMethodError: okhttp3.HttpUrl.get(Ljava/lang/String;)Lokhttp3/HttpUrl;</span><br><span class="line">at retrofit2.Retrofit$Builder.baseUrl(Retrofit.java:<span class="number">458</span>) ~[retrofit-<span class="number">2.5</span>.0.jar:na]</span><br><span class="line">at com.kingdee.kchain.fabric.ca.CaTemplate.&lt;init&gt;(CaTemplate.java:<span class="number">39</span>) ~[fabric-ca-sdk-<span class="number">1.2</span>.0.M11.jar:na]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.config.CaConfig.lambda$getCaTemplate$<span class="number">1</span>(CaConfig.java:<span class="number">29</span>) ~[classes/:na]</span><br><span class="line">at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:<span class="number">1660</span>) ~[na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.config.CaConfig.getCaTemplate(CaConfig.java:<span class="number">26</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.dao.CaClient.registerAndEnroll(CaClient.java:<span class="number">34</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.service.DigitalIdentityService.registerByProxy(DigitalIdentityService.java:<span class="number">97</span>) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.service.DigitalIdentityService$$FastClassBySpringCGLIB$$e2dfa5a.invoke(&lt;generated&gt;) ~[classes/:na]</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>) ~[spring-core-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:<span class="number">749</span>) ~[spring-aop-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">163</span>) ~[spring-aop-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:<span class="number">119</span>) ~[spring-context-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>) ~[spring-aop-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">688</span>) ~[spring-aop-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.service.DigitalIdentityService$$EnhancerBySpringCGLIB$$f1f7222c.registerByProxy(&lt;generated&gt;) ~[classes/:na]</span><br><span class="line">at com.kingdee.kchain.digitalidentity.controller.DigitalIdentityController.registerByProxy(DigitalIdentityController.java:<span class="number">54</span>) ~[classes/:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">497</span>) ~[na:<span class="number">1.8</span>.0_73]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">189</span>) ~[spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">138</span>) ~[spring-web-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">102</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">800</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1038</span>) ~[spring-webmvc-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">... <span class="number">58</span> common frames omitted</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>依旧是版本问题，将低版本依赖去掉，并添加一个okhttp依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp官网</a></p>]]></content>
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> NoSuchMethodError </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Java计算数字身份地址</title>
      <link href="/2018/12/04/%E6%95%B0%E5%AD%97%E8%BA%AB%E4%BB%BD%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/12/04/%E6%95%B0%E5%AD%97%E8%BA%AB%E4%BB%BD%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h2 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h2><p>需要开发一个新的数字身份服务项目，由于旧的数字身份服务中的账户地址是通过同事开发的权限链码获得，新的数字身份系统欲抛弃链码部分，因为没有找到有供Java使用的现成的生成该地址的库，因此需要使用Java来实现获取账户地址。</p><p><em>说明：</em> 本文所描述的<code>数字身份地址</code>，即公钥经过多次哈希散列及处理的地址，即以太坊中用来识别账户的地址，原链码即参考比特币地址算法实现。</p><h2 id="为什么需要这个地址"><a href="#为什么需要这个地址" class="headerlink" title="为什么需要这个地址"></a>为什么需要<code>这个地址</code></h2><p>地址是为了人们交换方便而弄出来的一个方案，因为公钥太长了。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="哈希-散列函数"><a href="#哈希-散列函数" class="headerlink" title="哈希/散列函数"></a>哈希/散列函数</h3><p><strong>典型算法：</strong> SHA，MD5</p><p><strong>算法思想：</strong> </p><ul><li>如果两个散列值是不相同的，那么这两个散列值的原始输入也是不相同的，即使Hash(x) != Hash(y)</li><li>用于信息压缩，并发现信息是否发生变化</li><li>计算速度快，特定算法其结果长度统一</li></ul><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p><strong>典型算法：</strong> DES，AES</p><p><strong>算法思想：</strong> </p><ul><li>加解密共用一个密钥</li><li>加/解密速度快，但密钥分发及管理困难，密钥交换的安全性不能保障，不够安全(在数据传送前，发送方和接收方必须商定好密钥，然后双方都必须要保存好密钥，如果一方的密钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一密钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担。)</li><li>区块链主要使用ECC椭圆曲线算法</li></ul><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p><strong>典型算法：</strong> RSA，ECC</p><p><strong>算法思想：</strong> </p><ul><li>加解密时，通讯一方有一对密钥（公钥和私钥）</li><li>公钥可以公开，分发给任何人</li><li>私钥不可以公开，严格持有</li><li>公钥加密，只能用私钥解密，反之亦然</li><li>加/解密速度较慢，但无密钥分发问题</li></ul><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p><strong>目的：</strong> </p><ul><li>检测数据未经授权的修改，签名者的身份识别和抗抵赖。</li><li>数字证书体系也是以此为核心:<br>  如果A有数字身份，则:<pre><code>1. A有自己的一对公钥和私钥；2. 数字身份的发证机关，证明了这个公钥对应的持有人是张三）。</code></pre></li></ul><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><blockquote><p>是由认证中心/证书颁发机构(CA)发放并经认证中心数字签名的，可以用来证明数字证书持有者的真实身份，并且数字证书只在特定的时间段内有效。<br>数字证书采用公钥体制，即利用一对相互匹配的密钥进行加密、解密。每个用户自己设定一把特定的仅为本人所知的私钥，用它进行解密和签名；同时，设定一把公钥并由本人公开，为一组用户所共享，用于加密和验证签名。当发送一份保密文件时，发送方使用接收方的公钥对数据加密，而接收方则使用自己的私钥解密，这样信息就可以安全无误地到达目的地了。通过数字的手段保证加密过程是一个不可逆过程，即只有用私钥才能解密。在公开密钥密码体制(PKI)中，常用的一种是RSA体制。<br>数字证书包含证书中所标识的实体的公钥（即你的证书里有你的公钥），由于证书将公钥与特定的个人匹配，并且该证书的真实性由颁发机构保证，因此，数字证书为如何找到用户的公钥并知道它是否有效这一问题提供了解决方案。<br>用户也可以采用自己的私钥对信息加以处理，由于密钥为本人所有，这样就产生了别人无法生成的文件，也就形成了<code>数字签名</code>。采用<code>数字签名</code>能够确认以下两点：</p><ul><li>保证信息是由签名者自己签名发送的，签名者不能否认或难以否认；</li><li>保证信息自签发后到收到为止未曾作过任何修改，签发的文件是真实文件。</li></ul></blockquote><ul><li>数字证书采用公钥体制:<ul><li>数字证书是”公钥+证书名称信息+签发机构对证书的数字签名”、匹配的私钥</li><li>数字证书遵从X.509国际标准</li></ul></li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>如果A给B发送一个加密的有数字签名的文件，会怎么样呢？<br>首先A有自己的公钥和私钥：A_public_key, A_private_key<br>B也有自己的公钥和私钥：B_public_key, B_private_key</p><ul><li>A和B互换公钥</li><li>A将文件用hash算法生成摘要，用A_private_key对摘要加密，得到的就叫数字签名</li><li>A用B_public_key对文件加密</li><li>将加密的文件和数字签名一起发给B<br>——B收到内容后——</li><li>用B_private_key解密文件，得到明文</li><li>用A_public_key解密数字签名，得到内容摘要<ul><li>解密数字签名时，需要事先知道发送方A的A_public_key，因此需要确定自己得到的A_public_key确实是发送方A的（例如：C知道B的公钥，然后偷偷把B手里A的公钥A_public_key换成自己的公钥C_public_key，那么以后C给B发送的东西，B还一直以为是A发送的。因为B不知道自己手里公钥就是A的），就需要使用数字证书。</li><li>证书无法伪造，因为数字证书里里有CA的数字签名，签名是由证书内容的哈希摘要用CA的私钥加密的。用CA的公钥验证签名的合法性就可以验证证书的真假。</li><li>A找证书中心（CA）申请自己的证书，CA把A的公钥和一些信息作为证书内容写入，然后用CA自己的私钥生成数字签名一并写入证书。A给B发数据时把用B的公钥加密的数据、A的数字签名、A的数字证书一起发过去。B的电脑安装有根证书（操作系统带的，知道CA的公钥），用CA的公钥验证A的数字证书里面签名的合法性，合法后从证书内容里读出A的公钥。再用A的公钥解密A的数字签名验证数据完成性。最后用B的私钥解密数据。<ul><li>将明文的文件内容用同样hash算法得到摘要，与第六步的摘要对比。相同则证明内容和来源都正确。</li></ul></li></ul></li></ul><p>=&gt; 加密：公钥加密，私钥解密；认证：私钥加密，公钥解密</p><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h2><p>这个算法和著名的<code>Base64</code>类似，区别在于它使用了更短的字母表：为了避免一些利用字母相似性的攻击，从字母表中移除了一些字母。也就是，没有这些符号：0（零）、O（大写的o）、I（大写的i）、l（小写的l）。</p><p><em>参考：</em></p><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么？</a></p><h2 id="原链码实现"><a href="#原链码实现" class="headerlink" title="原链码实现"></a>原链码实现</h2><p><em>特别说明：</em> 由于涉及到公司内部代码，以下仅仅简化版，无法运行，仅供参考。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"crypto/ecdsa"</span></span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line"><span class="string">"crypto/x509"</span></span><br><span class="line"><span class="string">"encoding/pem"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAddress</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="params">([]<span class="keyword">byte</span>， error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get cert</span></span><br><span class="line">certText := creatorByte[certStart:]</span><br><span class="line">bl， _ := pem.Decode(certText)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get publicKey from cert</span></span><br><span class="line">cert， err := x509.ParseCertificate(bl.Bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为获取地址重点</span></span><br><span class="line"><span class="keyword">if</span> pub， ok := cert.PublicKey.(*ecdsa.PublicKey); ok &#123;</span><br><span class="line">pubKey := <span class="built_in">append</span>(pub.X.Bytes()， pub.Y.Bytes()...)</span><br><span class="line">publicSHA256 := sha256.Sum256(pubKey)</span><br><span class="line">address := Base58Encode(publicSHA256[:])</span><br><span class="line"></span><br><span class="line">log.Debugf(<span class="string">"[getAddress] %s\n"</span>， address)</span><br><span class="line"><span class="keyword">return</span> address， <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Warning(<span class="string">"[getAddress]"</span>， <span class="string">"Only support ECDSA"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>， errors.New(<span class="string">"Only support ECDSA"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base58Encode encodes a byte array to Base58</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58Encode</span><span class="params">(input []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="comment">//Base58 encode </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>即使用同比特币地址相同的算法计算数字身份地址。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>-&gt; cert </p><p>=&gt; public key </p><p>=&gt; ecdsa public key </p><p>=&gt; append(ecdsa_pk.x.bytes(), ecdsa_pk.y.bytes()) =&gt; appendResult</p><p>=&gt; sha256(appendResult) =&gt; sha256Result</p><p>=&gt; base58Encode(sha256Result)</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"><span class="keyword">import</span> com.google.common.primitives.Bytes;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.UtilityClass;</span><br><span class="line"><span class="keyword">import</span> sun.security.ec.ECPublicKeyImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.ECPoint;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Digital identity util</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kairou Zeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitalIdentityUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由证书计算数字身份地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cert 证书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数字身份地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAddress</span><span class="params">(String cert)</span> </span>&#123;</span><br><span class="line">        X509Certificate x509Certificate = bytesToCertificate(cert.getBytes());</span><br><span class="line">        PublicKey publicKey = x509Certificate.getPublicKey();</span><br><span class="line">        ECPublicKeyImpl ecPublicKey = (ECPublicKeyImpl) publicKey;</span><br><span class="line">        ECPoint ecPoint = ecPublicKey.getW();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] x = ecPoint.getAffineX().toByteArray();</span><br><span class="line">        <span class="keyword">byte</span>[] y = ecPoint.getAffineY().toByteArray();</span><br><span class="line"></span><br><span class="line">        x = cleanHeadZero(x);</span><br><span class="line">        y = cleanHeadZero(y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] w = <span class="keyword">new</span> <span class="keyword">byte</span>[x.length + y.length];</span><br><span class="line">        System.arraycopy(x, <span class="number">0</span>, w, <span class="number">0</span>, x.length);</span><br><span class="line">        System.arraycopy(y, <span class="number">0</span>, w, x.length, y.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] hashCodeBytes = cleanHeadZero(Hashing.sha256().hashBytes(w).asBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Base58.encode(hashCodeBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除前置"0"</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 清除前置"0"前的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 清除前置"0"后的字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] cleanHeadZero(<span class="keyword">byte</span>[] bytes) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = bytes.length;</span><br><span class="line">        List&lt;Byte&gt; b = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; bytes[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            b.add(bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Bytes.toArray(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书的字节数组转为X509Certificate对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> certBytes 证书的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>          X509Certificate对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> X509Certificate <span class="title">bytesToCertificate</span><span class="params">(<span class="keyword">byte</span>[] certBytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (certBytes == <span class="keyword">null</span> || certBytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"input null or zero length"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedInputStream pem = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(certBytes));</span><br><span class="line">            CertificateFactory certFactory = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">            <span class="keyword">return</span> (X509Certificate) certFactory.generateCertificate(pem);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li>初看Java算出来的x、y和Go不一样。</li></ol><ul><li>一开始把x、y打印出来，发现和Go算出来的不一样，然后google一下，发现其实是一样的。如</li></ul><p>以下为Go计算得到的x、y：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.Bytes: [125 15 139 23 117 146 188 20 20 49 170 217 76 227 186 208 113 187 116 46 178 156 213 58 83 43 234 23 85 142 201 232]</span><br><span class="line">y.Bytes: [134 138 169 189 224 174 180 182 45 62 205 149 221 63 107 17 113 146 202 246 114 20 68 183 250 15 170 101 244 199 102 186]</span><br></pre></td></tr></table></figure></p><p>以下为Java计算得到的x、y：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.Bytes: [125, 15, -117, 23, 117, -110, -68, 20, 20, 49, -86, -39, 76, -29, -70, -48, 113, -69, 116, 46, -78, -100, -43, 58, 83, 43, -22, 23, 85, -114, -55, -24]</span><br><span class="line">y.Bytes:[-122, -118, -87, -67, -32, -82, -76, -74, 45, 62, -51, -107, -35, 63, 107, 17, 113, -110, -54, -10, 114, 20, 68, -73, -6, 15, -86, 101, -12, -57, 102, -70]</span><br></pre></td></tr></table></figure></p><p>观察可以发现，有些数字相同，而有些数字刚好是<code>Java result = Go result - 256</code>.</p><p>Java byte转int出现负数，其原因在于:<br>1.Java中byte的大小为8bits，其范围是-128~127的。<br>2.java的二进制采用的是补码形式</p><p>参考：<a href="https://stackoverflow.com/questions/24461629/go-sha-256-hash-differs-from-java-sha-256-hash" target="_blank" rel="noopener">Go SHA-256 hash differs from Java SHA-256 hash</a></p><ol start="2"><li>Go计算的x、y的字节数组，与Java计算出来的首尾会有多一个“0”的情况。</li></ol><ul><li>经过多次推导测试，发现，需要将x、y以及sha256后的数组将前导零去掉。</li></ul>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于GitLab CI/CD</title>
      <link href="/2018/09/17/%E5%85%B3%E4%BA%8EGitLab-CICD/"/>
      <url>/2018/09/17/%E5%85%B3%E4%BA%8EGitLab-CICD/</url>
      <content type="html"><![CDATA[<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><blockquote><p>持续集成(Continuous Integration,简称CI)，指频繁将代码集成到主干。</p></blockquote><ul><li><p>目的：</p><p>  更快速地发布更新，让产品快速迭代，同时还能保持高质量，提高开发效率。</p></li><li><p>核心措施：</p><p>  代码集成到主干前，必须通过自动化测试。只要有测试用例不通过，就不能集成。</p></li><li><p>组成：</p><ul><li>一个自动构建的过程，包括自动编译、分发、部署和测试等；</li><li>一个代码存储库，即需要版本控制来保障代码的可维护性，同时作为构建过程的素材库；</li><li>一个持续集成服务器</li></ul></li></ul><h2 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h2><blockquote><p>持续交付(Continuous Delivery)，指频繁地将软件的新版本交付给质量团队或用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p></blockquote><h2 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h2><blockquote><p>持续部署(Continuous Deployment)，是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。<br>与<code>持续交付</code>的区别在于：部署到生产环境的过程是否自动化(<code>持续交付</code>需要手动部署到生产环境)。</p></blockquote><h2 id="Gitlab-CI-CD"><a href="#Gitlab-CI-CD" class="headerlink" title="Gitlab CI/CD"></a>Gitlab CI/CD</h2><blockquote><p>GitLab CI是GitLab提供的持续集成服务，只要在仓库根目录创建一个.gitlab.yml文件(定义GitLab runner要做哪些操作)，并为该项目指派一个Runner，当有Merge Request或push的时候就会触发build.</p></blockquote><ul><li><p>.gitlab-ci.yml文件</p><p>  <code>.gitlab-ci.yml</code>是用来配置CI在我们的项目中做些什么工作。位于项目的根目录。</p><p>  任何的push操作，GitLab都会寻找<code>.gitlab-ci.yml</code>文件，并对此次commit开始jobs，jobs的内容来源于<code>.gitlab-ci.yml</code>文件。</p></li><li><p>GitLab  Runner </p><p>  <code>GitLab Runner</code>是<code>.gitlab-ci.yml</code>脚本的运行器，在GitLab中，Runners将会运行你在<code>.gitlab-ci.yml</code>中定义的jobs，Runner可以是虚拟机、VPS、裸机、docker容器，或者是容器。<code>GitLab Runner</code>不需要和<code>GitLab</code>安装在同一台机器上，但是考虑到<code>GitLab Runner</code>的资源消耗问题和安全问题， 也不建议这两者安装在同一台机器上。GitLab和Runners通过API通信，所以唯一的要求就是运行Runners的机器可以联网。</p><p>  <code>GitLab Runner</code>分为两种：</p><pre><code>- Shared Runners:可以运行所有开启`Allow shared runners`选项的项目- Specific Runners:只能被指定的项目使用</code></pre></li><li><p>Pipelines</p><p>  <code>Pipelines</code>是定义于<code>.gitlab-ci.yml</code>中的不同阶段的不同任务。一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。每个<code>Pipelines</code>包含有多个<code>Stages</code>,每个<code>Stages</code>包含有一个或多个<code>jobs</code>。每一次Merge Request或push都要经过流水线之后才可以合格出厂。而<code>.gitlab-ci.yml</code>正是定义了<code>Pipelines</code>有哪些<code>Stages</code>，每个<code>Stages</code>要做什么事。</p></li><li><p>Stages</p><p>  <code>Stages</code>表示构建阶段，可以在一次<code>Pipelines</code>中定义多个<code>Stages</code>.默认<code>Pipelines</code>有三个<code>Stages</code>：<code>build</code>、<code>test</code>、<code>deploy</code></p><ul><li><p>所有<code>Stages</code>会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始；</p></li><li><p>只有当所有<code>Stages</code>完成后，该构建任务<code>(Pipeline)</code>才会成功</p></li><li><p>如果任何一个<code>Stages</code>失败，那么后面的<code>Stages</code>不会执行，该构建任务<code>(Pipeline)</code>失败</p></li></ul></li><li><p>Jobs</p><p>  <code>Jobs</code>表示构建工作，表示某个<code>Stage</code>里面执行的工作。</p></li></ul><table><thead><tr><th>关键字</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>script</td><td>是</td><td>定义<code>Runner</code>需要执行的脚本或命令</td></tr><tr><td>extends</td><td>否</td><td>定义此<code>job</code>将继承的配置条目</td></tr><tr><td>image</td><td>否</td><td>需要使用的docker镜像</td></tr><tr><td>services</td><td>否</td><td>定义了所需的docker服务</td></tr><tr><td>stage</td><td>否</td><td>定义了<code>Job</code>的阶段，默认是<code>test</code></td></tr><tr><td>type</td><td>否</td><td><code>stage</code>的别名，不赞成使用</td></tr><tr><td>except</td><td>否</td><td>定义了哪些git分支不适合该<code>job</code></td></tr><tr><td>vaiables</td><td>否</td><td>在<code>job</code>级别上定义的变量</td></tr><tr><td>only</td><td>否</td><td>定义那些git分支适合该<code>job</code></td></tr><tr><td>tages</td><td>否</td><td>定义了哪些runner适合该job(runner在创建时会要求用户输入标签名来代表该runner)</td></tr><tr><td>allow_failure</td><td>否</td><td>允许任务失败，但是如果失败，将不会改变提交状态</td></tr><tr><td>when</td><td>否</td><td>定义<code>job</code>什么时候能被执行，可以是<code>on_success</code>,<code>on_failure</code>,<code>always</code>或者<code>manual</code></td></tr><tr><td>dependencies</td><td>否</td><td>定义了该<code>job</code>依赖哪一个<code>job</code>，如果设置该项，你可以通过artifacts设置</td></tr><tr><td>cache</td><td>否</td><td>定义需要被缓存的文件、文件夹列表</td></tr><tr><td>before_script</td><td>否</td><td>覆盖在根元素上定义的<code>before_script</code></td></tr><tr><td>after_script</td><td>否</td><td>覆盖在根元素上定义的<code>after_script</code></td></tr><tr><td>environment</td><td>否</td><td>定义让job完成部署的环境名称</td></tr><tr><td>coverage</td><td>否</td><td>定义代码覆盖率设置</td></tr><tr><td>retry</td><td>否</td><td>定义<code>job</code>失败后的自动充重试次数</td></tr></tbody></table><ul><li><p>script</p><p>  <code>script</code>是一段由<code>Runner</code>执行的shell脚本，例如：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">    script:</span> <span class="string">"bundle exec rspec"</span></span><br></pre></td></tr></table></figure></li></ul><pre><code>这个参数也可以使用数组包含几条命令：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">    script:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">uname</span> <span class="bullet">-a</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>其他</p><ul><li><p>从8.0版本开始，GitLab 持续集成（CI）完全集成到GitLab中，且默认所有的项目开启。</p></li><li><p><a href="https://docs.gitlab.com/ee/ci/quick_start/README.html" target="_blank" rel="noopener">文档地址</a></p></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写UT遇到的坑和解决方法</title>
      <link href="/2018/07/01/%E5%86%99UT%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/07/01/%E5%86%99UT%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<hr><p><strong>问题场景：</strong> 发送短信验证码的接口，验证码是一个由Util工具类生成的随机数，业务层需要验证结果</p><p><strong>解决方案：</strong> 使用PowerMock</p><blockquote><p>PowerMock扩展了EasyMock和Mockito框架，增加对static、final、私有方法的支持。</p></blockquote><p><code>PowerMock</code>有两个重要的注解：</p><ul><li><code>@RunWith(PowerMockRunner.class)</code></li><li><code>@PrepareForTest({YourClassEgStaticMethod.class})</code></li></ul><p>如果你的测试用例没有使用注解<code>@PrepareForTest</code>,那么可以不用加注解<code>@RunWith(PowerMockRunner.class)</code>,反之亦然。当你需要使用PowerMock强大功能(Mock静态、final、私有方法等)的时候，就需要加注解<code>@PrepareForTest</code>.</p><p>当某个测试方法被注解<code>@PrepareForTest</code>标注以后，在运行测试用例时，会创建一个新的<code>org.powermock.core.classloader.MockClassLoader</code>实例，然后加载该测试用例使用到的类(系统类除外)</p><p><code>PowerMock</code>会根据你的mock要求，去修改写在注解<code>@PrepareForTest</code>里的class文件(当前测试类会自动加入注解中),以满足特殊的mock需求.例如:去除final方法的final标识,在静态方法的最前面加入自己的虚拟实现等。</p><p>如果需要mock的是系统类的final方法和静态方法,<code>PowerMock</code>不会直接修改系统类的class文件，而是修改调用系统类的class文件,以满足mock需求.</p><ul><li>验证静态方法</li></ul><p>PowerMockito.verifyStatic(); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PowerMockito.verifyStatic(Mockito.times(<span class="number">2</span>)); <span class="comment">//被调用两次</span></span><br></pre></td></tr></table></figure><p>Static.firstStaticMethod(param);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tatic.thirdStaticMethod(Mockito.anyInt()); <span class="comment">// 以任何整数值被调用</span></span><br></pre></td></tr></table></figure><p><strong>实际解决代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="meta">@PowerMockRunnerDelegate</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@PowerMockIgnore</span>(&#123;<span class="string">"javax.net.*"</span>, <span class="string">"javax.security.*"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsVerificationCodeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> ThirdClient thirdClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> SmsVerificationCodeDao smsVerificationCodeDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(RandomUtils.class) </span><br><span class="line">    <span class="comment">//当mock静态方法、final方法时，必须加注解`@PrepareForTest`和`@RunWith`。注解`@PrepareForTest`里写的类是静态方法/final方法所在的类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVerificationCodeSms</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String code = <span class="string">"000000"</span>;</span><br><span class="line">        String telephone = <span class="string">"136********"</span>;</span><br><span class="line"></span><br><span class="line">        Response response = <span class="keyword">new</span> Response();</span><br><span class="line">        response.setErrcode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(RandomUtils.class);</span><br><span class="line">        PowerMockito.when(RandomUtils.getCodeChars()).thenReturn(code.toCharArray());</span><br><span class="line">        BDDMockito.given(thirdClient.sendSmsVcode(telephone, code)).willReturn(kdCloudResponse);</span><br><span class="line"></span><br><span class="line">        mockMvc.perform(post(<span class="string">"/send/vcode"</span>)</span><br><span class="line">                .param(<span class="string">"telephone"</span>, telephone))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"errcode"</span>).value(<span class="number">0</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"description"</span>).value(<span class="string">"ok"</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"data"</span>).isEmpty());</span><br><span class="line"></span><br><span class="line">        BDDMockito.verify(smsVerificationCodeDao).insert(any(), anyString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><strong>问题场景：</strong> 当遇到方法返回值为void,但又需要对返回值进行值相等判断时</p><p><strong>解决方案：</strong> 使用<code>Mockito.doAnswer</code></p><p><strong>实际解决代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginWithNewUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String username = <span class="string">"test@qq.com"</span>;</span><br><span class="line">    String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    Mockito.doAnswer(invocation -&gt; &#123;</span><br><span class="line">        User user = (User) invocation.getArguments()[<span class="number">0</span>];</span><br><span class="line">        user.setId(<span class="string">"10000"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;).when(userDao).save(any(User.class));</span><br><span class="line"></span><br><span class="line">    mockMvc.perform(post(<span class="string">"/user/login"</span>)</span><br><span class="line">            .param(<span class="string">"username"</span>, username)</span><br><span class="line">            .param(<span class="string">"password"</span>, password))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"errcode"</span>).value(<span class="number">0</span>))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"data.id"</span>).value(<span class="string">"10000"</span>));</span><br><span class="line"></span><br><span class="line">    BDDMockito.verify(kdUserDao).save(any());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拦截器HandlerInterceptorAdapter的使用</title>
      <link href="/2018/04/21/HandlerInterceptorAdapter%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/04/21/HandlerInterceptorAdapter%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="拦截器-HandlerInterceptorAdapter的使用"><a href="#拦截器-HandlerInterceptorAdapter的使用" class="headerlink" title="拦截器 - HandlerInterceptorAdapter的使用"></a>拦截器 - HandlerInterceptorAdapter的使用</h3><blockquote><p>Spring为我们提供了<strong>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</strong> 这个适配器，继承此类，可以实现自己的拦截器</p></blockquote><ul><li><strong>preHandle</strong> ：预处理回调方法，实现处理器的预处理（如登录检查），第三个参数为响应的处理器（如我们上一章的Controller实现）。返回值：true表示继续流程（如调用下一个拦截器或处理器）；  false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；</li></ul><ul><li><p><strong>postHandle</strong> ：后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</p></li><li><p><strong>afterCompletion</strong>：整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中preHandle返回true的拦截器的afterCompletion。</p><p>​</p></li></ul><p><em>为何不使用 实现HandlerInterceptor接口的方法 来实现</em></p><p>有时候我们可能只需要实现三个回调方法中的某一个，如果实现HandlerInterceptor接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个HandlerInterceptorAdapter适配器（一种适配器设计模式的实现），允许我们只实现需要的回调方法。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HandlerInterceptorAdapter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jmeter</title>
      <link href="/2018/03/20/Jmeter/"/>
      <url>/2018/03/20/Jmeter/</url>
      <content type="html"><![CDATA[<h1 id="Jmeter-测试相关"><a href="#Jmeter-测试相关" class="headerlink" title="Jmeter 测试相关"></a>Jmeter 测试相关</h1><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>一个性能测试请求负载是基于一个线程组完成的。一个测试计划必须有一个线程组。</p><p>JMeter中，每个测试计划至少需要包含一个线程组，当然也可以在一个计划中创建多个线程组。</p><p>在测试计划下面，多个线程是并行执行的，也就是说这些线程组是同时被初始化并同时执行线程组下的Sampler的。</p><p>线程组主要包括三个参数：线程数、准备时长(Ramp-Up Period(in seconds))、循环次数。</p><p><code>线程数</code>：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数这里就设置多少个线程数。</p><p><code>准备时长</code>：设置的虚拟用户数需要多长时间全部启动。如果线程数为20，准备时长为10，那么需要10秒钟启动20个线程，也就是每秒启动2个线程。</p><p><code>循环次数</code>：每个线程发送请求的次数。如果线程数为20，循环次数为100，那么每个线程发送100次请求。总请求数为20*100=2000。如果勾选了“永远”，那么所有线程会一直发送请求，直到选择停止运行脚本。</p><h2 id="JmeterPlugin-说明"><a href="#JmeterPlugin-说明" class="headerlink" title="JmeterPlugin 说明"></a>JmeterPlugin 说明</h2><p><strong>Ramp-up Period(in seconds):</strong></p><ol><li>决定多长时间启动所有线程。如果使用10个线程，ramp-up period是100秒，那么JMeter用100秒使所有10个线程启动并运行。每个线程会在上一个线程启动后10秒(100/10)启动。</li></ol><p>Ramp=up需要充足长以避免在启动测试时有一个太大的工作负载，并且要充足小以至于最后一个线程在第一个完成前启动。</p><ol start="2"><li><p>用于告知JMeter 要在多长时间内建立全部的线程。默认值是0。如果未指定ramp-up period ，也就是说ramp-up period 为零， JMeter 将立即建立所有线程。假设ramp-up period 设置成T 秒， 全部线程数设置成N个， JMeter 将每隔T/N秒建立一个线程。</p></li><li><p>Ramp-Up Period(in-seconds)代表隔多长时间执行，0代表同时并发</p></li></ol><h3 id="Over-Time"><a href="#Over-Time" class="headerlink" title="Over Time"></a>Over Time</h3><p><code>Response Times Over Time</code>：响应时间变化曲线。X轴表示的是系统运行的时刻，Y轴表示的是响应时间，F(X,Y)表示系统随着时间的推移，系统的响应时间的变化，可以看出响应时间稳定性。</p><p><code>Response Time Percentiles Over Time</code>: 响应时间百分比，X轴表示的是百分比，Y轴表示的是响应时间，F(X,Y)表示低于某个百分比的响应时间</p><p><code>Active Threads Over Time</code>：随着时间推移活跃线程数， X轴表示访问的时刻，Y轴表示活动线程数，F(X,Y)表示某个时刻的活动线程数</p><p><code>Bytes Throughput Over Time</code>：随着时间推移每秒接收和请求字节数变化趋势图，蓝色为每秒发送字节数，黄色为每秒接收字节数</p><p><code>Latencies Over Time</code>：每秒钟的响应等待时间， 表明Jmeter测试期间，随着时间的推移系统的响应等待时间的变化，也是系统随着时间推移，系统效率的变化。</p><p><code>Connect Time Over Time</code>：请求连接建立的时间</p><hr><h3 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h3><p><code>Hits per second</code>：每秒点击率</p><p><code>Codes per second</code>：每秒状态码数量</p><p><code>Transactions per second</code>：每秒事务量</p><p><code>Response Times vs Threads</code>：响应时间用户数， X轴表示的是活动线程数，也就是并发访问的用户数，Y轴表示的是响应时间，F(X,Y)表示在某种并发量的情况下，系统的响应时间是多少。</p><p><code>Latency Vs Request</code>: 延迟时间点请求的 成功/失败 数</p><hr><h3 id="Response-Times"><a href="#Response-Times" class="headerlink" title="Response Times"></a>Response Times</h3><p><code>Response Time Percentiles</code>：响应时间百分比</p><p><code>Response Time Overview</code>：响应时间分布</p><p><code>Time Vs Threads</code>: 测试过程中的线程数时续图</p><p><code>Response Time Distribution</code>: 响应时间分布</p><h2 id="JmeterPlugin-参数说明"><a href="#JmeterPlugin-参数说明" class="headerlink" title="JmeterPlugin 参数说明"></a>JmeterPlugin 参数说明</h2><p><code>Samples</code>：运行的线程数（也可理解为请求数）</p><p><code>Average</code>：平均响应时间，单位：ms</p><p><code>Median</code>：中位数，即50%用户的响应时间</p><p><code>90%Line</code>：90%用户的响应时间</p><p><code>95%Line</code>：95%用户的相应时间</p><p><code>99%Line</code>：99%用户的响应时间</p><p><code>Min</code>：最小响应时间</p><p><code>Max</code>：最大响应时间</p><p><code>Error</code>：本次测试中出现错误的请求的数量/请求的总数</p><p><code>Throughput</code>：吞吐量-每秒完成的请求数</p><p><code>Received KB/sec</code>：每秒从服务器端接收到的数据量</p><p><code>Sent KB/sec</code>：发送的千字节每秒的吞吐量测试</p><p><code>KB/sec</code>：每秒从服务器端接收到的数据量</p><p><code>Elapsed time</code>：经过的时间(= Sample time = Load time = Response time )<br>这个时间是我们测试常用的时间，也是整个请求的消耗时间，从发送到接收完成全程消耗的时间</p><p><code>Latency time</code>：延迟时间。不常用，表示请求发送到刚开始接收响应时，这个时间&lt;Elapsed time</p><p><code>Connection time</code>：不常用，请求连接建立的时间，这个时间 &lt; Latency time &lt; Elapsed time</p>]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSR-303校验</title>
      <link href="/2017/12/20/JSR-303%E6%A0%A1%E9%AA%8C/"/>
      <url>/2017/12/20/JSR-303%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="JSR-303校验"><a href="#JSR-303校验" class="headerlink" title="JSR-303校验"></a>JSR-303校验</h3><blockquote><p>JSR 303是Java EE 6中的一个数据校验规范，叫做Bean Validation，用于对Java Bean中的字段的值进行验证，官方参考实现是Hibernate Validator(validation-api是JSR-303规范的标准接口，Hibernate-validator则是这套接口的一个实现)。此实现与Hibernate ORM没有任何关系。</p></blockquote><h4 id="完成Java-Bean的验证的步骤："><a href="#完成Java-Bean的验证的步骤：" class="headerlink" title="完成Java Bean的验证的步骤："></a>完成Java Bean的验证的步骤：</h4><ol><li>约束注解的定义</li><li>约束验证规则（约束验证器）</li><li>约束注解的声明</li></ol><h4 id="约束的定义"><a href="#约束的定义" class="headerlink" title="约束的定义"></a>约束的定义</h4><p>一个constraint通常由annotation和相应的constraint validator组成，他们是一对多的关系。</p><p>当需要更加复杂的constraint，Bean Validation提供扩展constraint的机制。可以通过两种方法去实现：</p><ul><li><p>组合现有的constraint来生成一个更复杂的constraint</p></li><li><p>开发一个全新的constraint</p><p>定义一个新的Constraint注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD,ElementType.METHOD,ElementType.PARAMETER&#125;) <span class="comment">//约束注解应用的目标元素类型</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//约束注解应用的时机</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;MobilePhoneValidator.class&#125;) <span class="comment">//与约束注解关联的验证器</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MobileNumber &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "电话号码格式不正确"</span>;     <span class="comment">//约束注解验证时的输出消息</span></span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;     <span class="comment">//约束注解在验证时所属的组别</span></span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//约束注解的有效负载</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Constraint注解标注表明我们定义了一个用于限制的注解，validatedBy属性用于指定我们定义的当前限制类型需要被哪个ConstraintValidator进行校验。</p><p>在定义自己的限制类型的注解时，有三个属性是必须定义的，<strong>message</strong>、<strong>groups</strong>、<strong>payload</strong> 属性</p><p>对应的限制类型校验类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhoneValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">MobileNumber</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Pattern mobilePhonePattern = Pattern.compile(<span class="string">"1([\\d]&#123;10&#125;)"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(MobileNumber constraintAnnotation)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mobilePhonePattern.matcher(value).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限制类型校验类必须实现接口java.validation.ConstraintValidator，并实现它的initialize和isValid方法。</p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes the validator in preparation for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #isValid(Object, ConstraintValidatorContext)&#125; calls.</span></span><br><span class="line"><span class="comment"> * The constraint annotation for a given constraint declaration</span></span><br><span class="line"><span class="comment"> * is passed.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This method is guaranteed to be called before any use of this instance for</span></span><br><span class="line"><span class="comment"> * validation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> constraintAnnotation annotation instance for a given constraint declaration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(A constraintAnnotation)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements the validation logic.</span></span><br><span class="line"><span class="comment"> * The state of &#123;<span class="doctag">@code</span> value&#125; must not be altered.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This method can be accessed concurrently, thread-safety must be ensured</span></span><br><span class="line"><span class="comment"> * by the implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value object to validate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context context in which the constraint is evaluated</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> false&#125; if &#123;<span class="doctag">@code</span> value&#125; does not pass the constraint</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(T value, ConstraintValidatorContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConstraintValidator是使用了泛型的。它一共需要指定两种类型，第一个类型是对应的initialize方法的参数类型，第二个类型是对应的isValue方法的第一个参数类型。</p><p>从上面两个方法可以看出，isValue方法用于进行校验的。有时候我们在校验的过程中是需要取当前的限制类型的属性来进行校验的，比如我们在对@Min限制类型进行校验的时候我们是需要通过其value属性获取到当前校验类型定义的最小值的，我们可以看到isValid方法无法获取到当前的限制类型Money。这个时候initialize方法的作用就出来了。我们知道initialize方法是可以获取到当前的限制类型的，所以当我们在校验某种限制类型时需要获取当前限制类型的某种属性的时候，我们可以给当前的ConstraintValidator定义对应的属性，然后在initialize方法中给该属性赋值，接下来我们就可以在isValid方法中使用其对应的属性了。针对于这种情况我们来看一个代码示例，现在假设我要定义自己的@Min限制类型和对应的MinValidator校验器，那么我可以如下定义：</p><p><strong>Min限制类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD&#125;)  </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy=MinValidator.class)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Min &#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;  </span><br><span class="line">     </span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span></span>;  </span><br><span class="line">     </span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">     </span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MinValidator校验器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Min</span>, <span class="title">Integer</span>&gt; </span>&#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minValue;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Min min)</span> </span>&#123;  </span><br><span class="line">       <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">       <span class="comment">//把Min限制类型的属性value赋值给当前ConstraintValidator的成员变量minValue  </span></span><br><span class="line">       minValue = min.value();  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer value, ConstraintValidatorContext arg1)</span> </span>&#123;  </span><br><span class="line">       <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">       <span class="comment">//在这里我们就可以通过当前ConstraintValidator的成员变量minValue访问到当前限制类型Min的value属性了  </span></span><br><span class="line">       <span class="keyword">return</span> value &gt;= minValue;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>继续来说一下<strong>ConstraintValidator泛型的第二个类型</strong>，我们已经知道它的第二个类型是<strong>对应的isValid的方法的第一个参数</strong>，从我给的参数名称value来看也可以知道isValid方法的第一个参数正是对应的当前需要校验的数据的值，而它的类型也正是对应的我们需要校验的数据的数据类型。这两者的数据类型必须保持一致，否则Spring会提示找不到对应数据类型的ConstraintValidator。建立了自己的限制类型及其对应的ConstraintValidator后，其用法跟标准的JSR-303限制类型是一样的。</p><hr><p>附:</p><p> <strong>JSR 303一些验证约束 </strong></p><p><code>Bean Validation中内置的constraint</code></p><table><thead><tr><th>Constraint(约束)</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>被对象是否为null</td></tr><tr><td>@NotNull</td><td>被对象是否不为不为null</td></tr><tr><td>@NotBlank</td><td>检查约束字符串是不是Null还有被trim的长度是否大于0,只对字符串,且会去掉前后空格</td></tr><tr><td>@AssertTrue</td><td>被Boolean对象是否为true</td></tr><tr><td>@AssertFalse</td><td>被Boolean对象是否为false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于value</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于value</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于value</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于value</td></tr><tr><td>@Size(max,min)</td><td>被对象(Array,Collection,Map,String)的长度/集合大小是否在指定的范围内</td></tr><tr><td>@Digits(integer,fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接收的范围内(integer指定整数精度，fraction指定小数精度)</td></tr><tr><td>@Past</td><td>被Date和Calendar对象是否在当前时间之前</td></tr><tr><td>@Future</td><td>被Date和Calendar对象是否在当前时间之后</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Valid</td><td>递归地对关联对象进行校验，如果关联对象是个集合或者数组，那么对其中的元素进行递归校验，如果是一个map，则对其中的值的部分进行校验</td></tr></tbody></table><p><code>Hibernate Validator附加的constraint</code></p><table><thead><tr><th>Constraint</th><th>说明</th></tr></thead><tbody><tr><td>@Email</td><td>被注释</td></tr><tr><td>@Length</td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串必须非空</td></tr><tr><td>@Range(min,max)</td><td>被注释的元素必须在合适的范围内</td></tr><tr><td>@CreditCardNumber</td><td>信用卡验证</td></tr></tbody></table><p>附：</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-beanvalid/" target="_blank" rel="noopener">Bean Validation 技术规范特性概述</a></p><p><a href="https://my.oschina.net/u/726229/blog/310063" target="_blank" rel="noopener">SpringMVC介绍之Validation</a></p><p><a href="https://my.oschina.net/stategrace/blog/347278" target="_blank" rel="noopener">jsr303，jsr 349自定义注解验证实现</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jsr303/" target="_blank" rel="noopener">JSR 303 - Bean Validation 介绍及最佳实践</a></p>]]></content>
      
      <categories>
          
          <category> 数据校验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSR303 </tag>
            
            <tag> 数据校验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日期和时间使用技巧</title>
      <link href="/2017/12/10/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/12/10/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h4 id="以前"><a href="#以前" class="headerlink" title="以前"></a>以前</h4><p>使用 <strong>System.currentTimeMillis()</strong> 来返回1970年1月1日到今天的毫秒数。</p><p>或者使用 <strong>Date</strong> 类来操作日期。</p><p>当遇到加减月份、天数的时候，又需要用到 <strong>Calendar</strong> 。</p><p>当需要格式化日期的时候需要使用<strong>java.text.DateFormat</strong> 类。</p><p>再或者引入第三方 <strong>Joda-Time</strong> 这个专门处理日期时间的库。</p><h4 id="为什么我们需要新的Java日期-时间API"><a href="#为什么我们需要新的Java日期-时间API" class="headerlink" title="为什么我们需要新的Java日期/时间API"></a>为什么我们需要新的Java日期/时间API</h4><ol><li>Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义</li><li>java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计</li><li>对于时间、时间戳、格式化以及解析，并没有一些明确定义的类。对于格式化和解析的需求，我们有java.text.DateFormat抽象类，但通常情况下，SimpleDateFormat类被用于此类需求</li><li>所有的日期类都是可变的，因此他们都不是线程安全的，这是Java日期类最大的问题之一</li><li>日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</li></ol><h4 id="JAVA8日期时间API"><a href="#JAVA8日期时间API" class="headerlink" title="JAVA8日期时间API"></a>JAVA8日期时间API</h4><p>Java 8中 java.util.Date 类新增了两个方法，分别是<strong>from(Instant instant)</strong>和<strong>toInstant()</strong>方法。</p><p>这两个方法使我们可以方便的实现将旧的日期类转换为新的日期类，具体思路都是通过Instant当中介，然后通过Instant来创建LocalDateTime（这个类可以很容易获取LocalDate和LocalTime），新的日期类转旧的也是如此，将新的先转成LocalDateTime，然后获取Instant，接着转成Date。</p><p><code>java.time包</code> 是在JDK8引入的，提供了用于日期、时间、实例和周期的主要API。所有的类都是<strong>线程安全</strong>的</p><ul><li>ZoneId：时区ID，用来确定Instant和LocalDateTime互相转换的规则</li><li>Instant：用来表示时间线上的一个点</li><li>LocalDate：表示没有时区的日期，LocalDate是不可变并且线程安全的</li><li>LocalTime：表示没有时区的时间，LocalTime是不可变并且线程安全的</li><li>LocalDateTime：表示没有时区的日期时间，LocalDateTime是不可变并且线程安全的</li><li>Clock：时钟，用于访问当前时刻、日期、时间，用到时区</li><li>Duration：用秒和纳秒表示时间的数量</li><li>Year：表示年份</li><li>Month：表示月份</li><li>YearMonth：表示年月</li><li>MonthDay：表示月日</li><li>DayOfWeek：存储星期的一天</li><li>DateTimeFormatter：在日期对象与字符串之间进行转换</li><li>ChronoUnit：计算出两个时间点之间的时间距离，可按多种时间单位计算</li><li>TemporalAdjuster：各种日期计算功能</li></ul><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><blockquote><p>它代表的是时间戳</p></blockquote><h4 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h4><blockquote><p>LocalDate代表一个ISO格式(yyyy-MM-dd)的日期，如：2017-12-07，可以存储纪念日等日期。</p></blockquote><p>获取当前的日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">System.out.println(localDate);</span><br></pre></td></tr></table></figure><p>输出：2017-12-07</p><p>LocalDate可以指定特定的日期，调用of或parse方法返回该实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate.of(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">20</span>);</span><br><span class="line">LocalDate.parse(<span class="string">"2017-07-20"</span>);</span><br></pre></td></tr></table></figure><p><strong>明天</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now().plusDays(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>减去一个月</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate prevMonth = LocalDate.now().minus(<span class="number">1</span>, ChronoUnit.MONTHS);</span><br></pre></td></tr></table></figure><p><strong>每周中的星期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DayOfWeek thursday = LocalDate.parse(<span class="string">"2017-07-20"</span>).getDayOfWeek();</span><br></pre></td></tr></table></figure><p><strong>每月中的日</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> twenty = LocalDate.parse(<span class="string">"2017-07-20"</span>).getDayOfMonth();</span><br></pre></td></tr></table></figure><p><strong>是否是闰年</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> leapYear = LocalDate.now().isLeapYear();</span><br></pre></td></tr></table></figure><p><strong>日期之前</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> notBefore = LocalDate.parse(<span class="string">"2017-07-20"</span>).isBefore(LocalDate.parse(<span class="string">"2017-07-22"</span>));</span><br></pre></td></tr></table></figure><p><strong>日期之后</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isAfter = LocalDate.parse(<span class="string">"2017-07-20"</span>).isAfter(LocalDate.parse(<span class="string">"2017-07-22"</span>));</span><br></pre></td></tr></table></figure><p><strong>日期相同</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isSame = LocalDate.parse(<span class="string">"2017-07-20"</span>).isAfter(LocalDate.parse(<span class="string">"2017-07-20"</span>));</span><br></pre></td></tr></table></figure><p><strong>获取这个月的第一天</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate first = LocalDate.now().with(TemporalAdjusters.firstDayOfMonth());</span><br></pre></td></tr></table></figure><p><strong>判断生日</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate birthday = LocalDate.of(<span class="number">2017</span>,<span class="number">12</span>,<span class="number">07</span>);</span><br><span class="line">MonthDay birthdayMd  = MonthDay.of(birthday.getMonth(), birthday.getDayOfMonth());</span><br><span class="line">MonthDay today = MonthDay.from(LocalDate.now());</span><br><span class="line"><span class="keyword">boolean</span> isBirthday = today.equals(birthdayMd)</span><br></pre></td></tr></table></figure><h4 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h4><blockquote><p>表示一个时间，而不是日期，如：20:16:34.963</p></blockquote><p><strong>现在的时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime now = LocalTime.now();</span><br></pre></td></tr></table></figure><p><strong>字符串解析为LocalTime</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime nowTime = LocalTime.parse(<span class="string">"15:02"</span>);</span><br></pre></td></tr></table></figure><p><strong>使用of创建一个时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime nowTime = LocalTime.of(<span class="number">15</span>, <span class="number">02</span>);</span><br></pre></td></tr></table></figure><p><strong>使用字符串解析并添加一小时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime nowTime = LocalTime.parse(<span class="string">"15:02"</span>).plus(<span class="number">1</span>, ChronoUnit.HOURS);</span><br></pre></td></tr></table></figure><p><strong>获取时间的小时、分钟、秒</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int hour = LocalTime.parse(&quot;15:02&quot;).getHour();</span><br><span class="line">int minute = LocalTime.parse(&quot;15:02&quot;).getMinute();</span><br><span class="line">int second = LocalTime.parse(&quot;15:02&quot;).getSecond()</span><br></pre></td></tr></table></figure><p><strong>判断时间前后</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isBefore = LocalTime.parse(<span class="string">"15:02"</span>).isBefore(LocalTime.parse(<span class="string">"16:02"</span>));</span><br><span class="line"><span class="keyword">boolean</span> isAfter = LocalTime.parse(<span class="string">"15:02"</span>).isAfter(LocalTime.parse(<span class="string">"16:02"</span>));</span><br></pre></td></tr></table></figure><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><blockquote><p>LocalDateTime是用来表示日期和时间的，不过还是没有偏移信息或者说时区。如：2017-12-07T20:17:04.199</p></blockquote><p><strong>获取当前的日期和时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();</span><br></pre></td></tr></table></figure><p><strong>使用静态方法和字符串创建LocalDateTime对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime.of(<span class="number">2017</span>, Month.JULY, <span class="number">20</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">10</span>);</span><br><span class="line">LocalDateTime.parse(<span class="string">"2017-07-20T15:18:10"</span>);</span><br></pre></td></tr></table></figure><p><strong>日期增减</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime tomorrow = now.plusDays(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"明天的这个时间: "</span> + tomorrow);</span><br><span class="line">LocalDateTime minusTowHour = now.minusHours(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"两小时前: "</span> + minusTowHour);</span><br></pre></td></tr></table></figure><p><strong>该类也提供一系列的get方法来获取特定单位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Month month = LocalDateTime.now().getMonth();</span><br></pre></td></tr></table></figure><p><strong>使用</strong>DateTimeFormatter<strong>的</strong>format<strong>方法将日期、时间格式化为字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">String dateString = dateTimeFormatter.format(LocalDate.now());</span><br><span class="line"></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">String dateString = dateTimeFormatter.format(LocalDateTime.now());</span><br></pre></td></tr></table></figure><h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><blockquote><p>日期周期，用于修改给定日期或获得的两个日期之间的区别</p></blockquote><p><strong>日期+5</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate initialDate = LocalDate.parse(<span class="string">"2017-07-20"</span>);</span><br><span class="line">LocalDate finalDate   = initialDate.plus(Period.ofDays(<span class="number">5</span>));</span><br><span class="line">System.out.println(<span class="string">"初始化日期: "</span> + initialDate);  <span class="comment">//2017-12-07</span></span><br><span class="line">System.out.println(<span class="string">"加日期之后: "</span> + finalDate);    <span class="comment">//2017-12-10</span></span><br></pre></td></tr></table></figure><p>周期API中提供给我们可以比较两个日期的差别，像下面这样获取差距天数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> between = ChronoUnit.DAYS.between(initialDate, finalDate);</span><br><span class="line">System.out.println(<span class="string">"差距天数: "</span> + between);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate initialDate = LocalDate.of(<span class="number">2017</span>,<span class="number">7</span>,<span class="number">20</span>);</span><br><span class="line">LocalDate finalDate   = LocalDate.of(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">21</span>);</span><br><span class="line">System.out.println(finalDate.until(initialDate, ChronoUnit.DAYS));  <span class="comment">//364</span></span><br></pre></td></tr></table></figure><h4 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h4><blockquote><p> 这是一个包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime zonedDateTime = ZonedDateTime.now();  <span class="comment">//2017-12-07T21:47:52.495+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><h4 id="OffsetDateTime"><a href="#OffsetDateTime" class="headerlink" title="OffsetDateTime"></a>OffsetDateTime</h4><blockquote><p>实际上包含了LocalDateTime与ZoneOffset。它用来表示一个包含格林威治时间偏移量（+/-小时：分，比如+06:00或者 -08：00）的完整的日期（年月日）及时间（时分秒，纳秒）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2016</span>, Month.JULY, <span class="number">14</span>, <span class="number">14</span>,<span class="number">20</span>);</span><br><span class="line">ZoneOffset zoneOffset = ZoneOffset.of(<span class="string">"+8"</span>);</span><br><span class="line">OffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);</span><br><span class="line">System.out.println(offsetDateTime); <span class="comment">//2016-07-14T14:20+08:00</span></span><br></pre></td></tr></table></figure><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p><strong>Date和Instant互相转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Instant instant = Instant.now();<span class="comment">//2017-12-07T11:27:07.005Z</span></span><br><span class="line">Date date = Date.from(instant);<span class="comment">//Thu Dec 07 19:27:07 CST 2017</span></span><br><span class="line">Instant instant1 = date.toInstant();<span class="comment">//2017-12-07T11:27:07.005Z</span></span><br></pre></td></tr></table></figure><p><strong>Date转LocalDateTime</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//Thu Dec 07 19:33:20 CST 2017</span></span><br><span class="line">Instant instant = date.toInstant();<span class="comment">//2017-12-07T11:33:20.218Z</span></span><br><span class="line">ZoneId zoneId = ZoneId.systemDefault();<span class="comment">//Asia/Shanghai</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zoneId);<span class="comment">//2017-12-07T19:33:20.218</span></span><br></pre></td></tr></table></figure><p><strong>LocalDateTime转Date</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();<span class="comment">//2017-12-07T19:47:49.385</span></span><br><span class="line">ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault()); <span class="comment">//2017-12-07T19:47:49.385+08:00[Asia/Shanghai]</span></span><br><span class="line">Instant instant = zonedDateTime.toInstant();<span class="comment">//2017-12-07T11:47:49.385Z</span></span><br><span class="line">Date date = Date.from(instant);<span class="comment">//Thu Dec 07 19:47:49 CST 2017</span></span><br></pre></td></tr></table></figure><p><strong>LocalDate转Date</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();<span class="comment">//2017-12-07</span></span><br><span class="line">LocalDateTime localDateTime = localDate.atStartOfDay();<span class="comment">//2017-12-07T00:00</span></span><br><span class="line">ZoneId zone = ZoneId.systemDefault();</span><br><span class="line">ZonedDateTime zonedDateTime = localDateTime.atZone(zone);<span class="comment">//2017-12-07T00:00+08:00[Asia/Shanghai]</span></span><br><span class="line">Date date = Date.from(zonedDateTime.toInstant());<span class="comment">//Thu Dec 07 00:00:00 CST 2017</span></span><br></pre></td></tr></table></figure><p><strong>Date转LocalDate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//Thu Dec 07 19:33:20 CST 2017</span></span><br><span class="line">Instant instant = date.toInstant();<span class="comment">//2017-12-07T11:33:20.218Z</span></span><br><span class="line">ZoneId zoneId = ZoneId.systemDefault();<span class="comment">//Asia/Shanghai</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zoneId);<span class="comment">//2017-12-07T19:33:20.218</span></span><br><span class="line">LocalDate localDate = localDateTime.toLocalDate(); <span class="comment">//2017-12-07</span></span><br></pre></td></tr></table></figure><p><strong>Date转LocalTime</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//Thu Dec 07 19:33:20 CST 2017</span></span><br><span class="line">Instant instant = date.toInstant();<span class="comment">//2017-12-07T11:33:20.218Z</span></span><br><span class="line">ZoneId zoneId = ZoneId.systemDefault();<span class="comment">//Asia/Shanghai</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zoneId);<span class="comment">//2017-12-07T19:33:20.218</span></span><br><span class="line">LocalTime localTime = localDateTime.toLocalTime();<span class="comment">//19:33:20.218</span></span><br></pre></td></tr></table></figure><p><strong>LocalTime转Date</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();<span class="comment">//21:41:29.072</span></span><br><span class="line">LocalDate localDate = LocalDate.now();<span class="comment">//2017-12-07</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(localDate, localTime);<span class="comment">//2017-12-07T21:41:29.072</span></span><br><span class="line">ZoneId zoneId = ZoneId.systemDefault();  <span class="comment">//Asia/Shanghai</span></span><br><span class="line">Instant instant = localDateTime.atZone(zoneId).toInstant();<span class="comment">//2017-12-07T13:41:29.072Z</span></span><br><span class="line">Date date = Date.from(instant);<span class="comment">//Thu Dec 07 21:41:29 CST 2017</span></span><br></pre></td></tr></table></figure><h4 id="java-util-Date到新库类的转换"><a href="#java-util-Date到新库类的转换" class="headerlink" title="java.util.Date到新库类的转换"></a>java.util.Date到新库类的转换</h4><p>转换可通过下面的方法进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date.toInstant()</span><br><span class="line">Date.from(Instant)</span><br><span class="line">Calendar.toInstant()</span><br></pre></td></tr></table></figure><h4 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h4><blockquote><p>Clock提供了对当前时间和日期的访问功能。Clock是对当前时区敏感的，并可用于替代System.currentTimeMillis()方法来获取当前的毫秒时间。当前时间线上的时刻可以用Instance类来表示。Instance也能够用于创建原先的java.util.Date对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Clock clock=Clock.systemUTC();<span class="comment">//获取格林尼治时间</span></span><br><span class="line">System.out.println(clock.instant());<span class="comment">//获取Instant类型数据，后面会讲到</span></span><br><span class="line">System.out.println(clock.millis());<span class="comment">//获取标准毫秒数</span></span><br></pre></td></tr></table></figure><h4 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h4><blockquote><p>在日期对象与字符串之间进行转换</p></blockquote><p><strong>DateTimeFormatter与SimpleDateFormat的区别</strong></p><ul><li>Java8的DateTimeFormatter也是线程安全的，而SimpleDateFormat并不是线程安全</li></ul><p><strong>获取DateTimeFormatter对象的三种方式</strong></p><ul><li>直接使用静态常量创建DateTimeFormatter格式器</li><li>使用代码不同风格的枚举值来创建DateTimeFormatter格式器</li><li>根据模式字符串来创建DateTimeFormatter格式器</li></ul><p><strong>DateTimeFormatter完成格式化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter[] formatters = <span class="keyword">new</span> DateTimeFormatter[]&#123;</span><br><span class="line">  <span class="comment">//直接使用常量创建DateTimeFormatter格式器</span></span><br><span class="line">  DateTimeFormatter.ISO_LOCAL_DATE,   <span class="comment">//2017-12-08</span></span><br><span class="line">  DateTimeFormatter.ISO_LOCAL_TIME,   <span class="comment">//16:48:56.944</span></span><br><span class="line">  DateTimeFormatter.ISO_LOCAL_DATE_TIME,  <span class="comment">//2017-12-08T16:48:56.944</span></span><br><span class="line">  <span class="comment">//使用本地化的不同风格来创建DateTimeFormatter格式器</span></span><br><span class="line">  DateTimeFormatter.ofLocalizedTime(FormatStyle.LONG),    <span class="comment">//下午04时48分56秒</span></span><br><span class="line">  DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL),    <span class="comment">//2017年12月8日 星期五</span></span><br><span class="line">  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.MEDIUM),    <span class="comment">//2017年12月8日 星期五 16:48:56</span></span><br><span class="line">  <span class="comment">// 根据模式字符串来创建DateTimeFormatter格式器</span></span><br><span class="line">  DateTimeFormatter.ofPattern(<span class="string">"GyyyyMMMdd HH:mm:ss"</span>)  <span class="comment">//公元2017十二月08 16:53:46</span></span><br><span class="line">&#125;;</span><br><span class="line">LocalDateTime date = LocalDateTime.now();</span><br><span class="line"><span class="comment">// 依次使用不同的格式器对LocalDateTime进行格式化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; formatters.length ; i++)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(date.format(formatters[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DateTimeFormatter解析字符串</strong></p><ul><li>根据需求的日期时间字符串，定义解析所用的格式器</li><li>执行解析XX.parse(string, fomatter)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个任意格式的日期时间字符串</span></span><br><span class="line">String str1 = <span class="string">"2017==12==07 17时00分00秒"</span>;</span><br><span class="line"><span class="comment">// 根据需要解析的日期、时间字符串定义解析所用的格式器</span></span><br><span class="line">DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(<span class="string">"yyyy==MM==dd HH时mm分ss秒"</span>);</span><br><span class="line"><span class="comment">// 执行解析</span></span><br><span class="line">LocalDateTime dt1 = LocalDateTime.parse(str1, fomatter1); <span class="comment">//2017-12-07T17:00</span></span><br></pre></td></tr></table></figure><h4 id="ChronoUnit"><a href="#ChronoUnit" class="headerlink" title="ChronoUnit"></a>ChronoUnit</h4><blockquote><p>计算出两个时间点之间的时间距离，可按多种时间单位计算</p></blockquote><h4 id="TemporalAdjuster"><a href="#TemporalAdjuster" class="headerlink" title="TemporalAdjuster"></a>TemporalAdjuster</h4><blockquote><p>各种日期计算功能</p></blockquote><p><strong>从Year获取LocalDate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Year year = Year.now();</span><br><span class="line">LocalDate localDate = year.atDay(<span class="number">59</span>);  <span class="comment">//2017-02-28</span></span><br></pre></td></tr></table></figure><p><strong>把LocalTime关联到一个LocalDate得到一个LocalDateTime</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">LocalDateTime localDateTime = localTime.atDate(localDate);<span class="comment">//2017-02-28T20:44:40.822</span></span><br></pre></td></tr></table></figure><p><strong>从Year获取YearMonth</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YearMonth yearMonth = year.atMonth(<span class="number">2</span>);<span class="comment">//2017-02</span></span><br></pre></td></tr></table></figure><p><strong>YearMonth指定日得到LocalDate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 = yearMonth.atDay(<span class="number">28</span>);<span class="comment">//2017-02-28</span></span><br></pre></td></tr></table></figure><p><strong>解析字符串形式的日期时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy MM dd"</span>);</span><br><span class="line">TemporalAccessor temporalAccessor = formatter.parse(<span class="string">"2013 01 15"</span>);</span><br><span class="line">LocalDate localDate = LocalDate.from(temporalAccessor);</span><br><span class="line">System.out.println(<span class="string">"TemporalAccessor :"</span> +localDate); <span class="comment">//TemporalAccessor :2013-01-15</span></span><br></pre></td></tr></table></figure><p><strong>计算某月的第一个星期一的日期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemporalAdjuster temporalAdjuster = TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY);</span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate1 = localDate.with(temporalAdjuster);</span><br><span class="line">System.out.println(localDate1);<span class="comment">//2017-12-04(12月的第一个周一)</span></span><br></pre></td></tr></table></figure><p><strong>计算某月第一天的日期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemporalAdjuster temporalAdjuster = TemporalAdjusters.firstDayOfMonth();</span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate1 = localDate.with(temporalAdjuster);</span><br><span class="line">System.out.println(localDate1);<span class="comment">//2017-12-01</span></span><br></pre></td></tr></table></figure><p><strong>计算LocalDate的下一个星期一的日期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.MONDAY);</span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate1 = localDate.with(temporalAdjuster);</span><br><span class="line">System.out.println(localDate1);<span class="comment">//2017-12-11</span></span><br></pre></td></tr></table></figure><p>该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：</p><ul><li>of：静态工厂方法。</li><li>parse：静态工厂方法，关注于解析。</li><li>get：获取某些东西的值。</li><li>is：检查某些东西的是否是true。</li><li>with：不可变的setter等价物。</li><li>plus：加一些量到某个对象。</li><li>minus：从某个对象减去一些量。</li><li>to：转换到另一个类型。</li><li>at：把这个对象与另一个对象组合起来，例如：<code>date.atTime(time)</code>。</li></ul>]]></content>
      
      <categories>
          
          <category> 日期处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>统一异常处理</title>
      <link href="/2017/11/01/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2017/11/01/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="关于全局异常处理"><a href="#关于全局异常处理" class="headerlink" title="关于全局异常处理"></a>关于全局异常处理</h4><blockquote><p>程序中存在一些诸如用户操作不当或者程序的bug，有大量需要处理的异常。而有些异常是不能直接抛给用户的，而是需要处理通过一些弹窗等提示信息的方法告知用户。</p><p>而这就需要在程序中有一个机制，去处理这些异常，将程序的异常转换为用户可读的异常</p></blockquote><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><ul><li>用户输入了非法数据</li><li>程序错误引起</li><li>物理错误引起</li></ul><h5 id="没有异常处理"><a href="#没有异常处理" class="headerlink" title="没有异常处理"></a>没有异常处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SystemException(<span class="string">"system exception"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口直接把异常抛出（在默认情况下，Spring MVC处理Web请求时如果发现存在没有应用代码捕获的异常，那么会返回HTTP 500（Internal Server Error）错误。），如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1514280270178</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"com.test.SystemException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"system exception"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>自定义一个异常处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemException</span><span class="params">(String message, Integer code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>定义当前Controller异常处理</p><p><code>@ExceptionHandler</code>可以使用在任何用<code>@Controller</code>注解修饰的类中，设置出现某种异常的时候执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SystemException(<span class="string">"system exception"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">expHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SystemException)&#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"Error code:%s,Message:%s"</span>, ((SystemException) e).getCode(), e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"exception"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口结果按照预期打印：Error code:500,Message:system exception</p></li></ul><ul><li><p>基类，其他Controller类继承它</p><p>当一个Controller中有方法加了<code>@ExceptionHandler</code>之后，这个Controller其他方法中没有捕获的异常就会以参数的形式传入加了<code>@ExceptionHandler</code>注解的那个方法中。</p><ul><li><p>设计一个基类，所有需要异常处理的Controller都继承这个类，从而获取到异常处理的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ExceptionHandler</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">expHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SystemException)&#123;</span><br><span class="line">      <span class="keyword">return</span> String.format(<span class="string">"Error code:%s,Message:%s"</span>, ((SystemException) e).getCode(), e.getMessage());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"exception"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul></li><li><p>使用<code>@ControllerAdvice</code>注解做全局异常处理</p><p><code>@ControllerAdvice</code>提供了和前面一样的异常处理能力，但是可以被应用于Spring应用上下文中的所有<code>@Controller</code>，拦截程序抛出的异常。</p><p>Spring MVC默认对于没有捕获也没有被<code>@ResponseStatus</code>以及<code>@ExceptionHandler</code>声明的异常，会直接返回500，这显然并不友好，可以在<code>@ControllerAdvice</code>中对其进行处理</p><ul><li><p>定义全局异常处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(SystemException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">expHandler</span><span class="params">(SystemException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResponse(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义统一的JSON返回对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errcode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JsonResponse</span><span class="params">(<span class="keyword">int</span> errcode, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errcode = errcode;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JsonResponse(SystemException e)&#123;</span><br><span class="line">        <span class="keyword">this</span>(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SystemException(<span class="string">"system exception"</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errcode"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"system exception"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul></li></ul><p><code>优先级问题</code>：</p><p>同一种异常处理在本类的优先级高于全局的异常处理</p><p><code>@RestControllerAdvice</code>:</p><p>@RestControllerAdvice是一个组合注解，组合了@ControllerAdvice、@ResponseBody。</p>]]></content>
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java优先队列 PiorityQueue</title>
      <link href="/2017/10/15/java%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
      <url>/2017/10/15/java%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><code>PriorityQueue</code>是个基于优先级堆的极大优先级队列,PriorityQueue的排序不是普通的排序，而是堆排序。</p><p>排序方式：</p><ul><li>自然排序：根据元素的自然顺序来指定排序(参阅Comparable)，也就是数字默认是小的在队列头，字符串则按字典序排列，也可以根据 Comparator来指定，这取决于使用哪种构造方法。</li><li>定制排序：根据Comparator来指定，使用Comparator类来重写compare(Object o1,Object o2)方法来实现定制排序</li></ul><p>PriorityQueue对元素采用的是堆排序，头是按指定排序方式的最小元素。堆排序只能保证根是最大（最小），整个堆并不是有序的。</p><p>优先级队列不允许null元素，依靠自然排序的优先级队列还不允许插入不可比较的对象(这样做可能导致ClassCastException)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueueTest3</span>   </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>   </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        PriorityQueue pq = <span class="keyword">new</span> PriorityQueue();  </span><br><span class="line">        pq.offer(<span class="number">6</span>);  </span><br><span class="line">        pq.offer(-<span class="number">3</span>);  </span><br><span class="line">        pq.offer(<span class="number">0</span>);  </span><br><span class="line">        pq.offer(<span class="number">9</span>);  </span><br><span class="line">        System.out.println(pq);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆排序只会保证第一个元素(根节点)的元素是当前优先队列里面最小(或者最大)的元素，而且每一次变化之后，比如offer()或者poll()之后，都会进行堆重排，所以如果想要按从小到大的顺序取出元素，那么需要用一个for循环,如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueueTest3</span>   </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>   </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        PriorityQueue pq = <span class="keyword">new</span> PriorityQueue();  </span><br><span class="line">        pq.offer(<span class="number">6</span>);  </span><br><span class="line">        pq.offer(-<span class="number">3</span>);  </span><br><span class="line">        pq.offer(<span class="number">0</span>);  </span><br><span class="line">        pq.offer(<span class="number">9</span>);  </span><br><span class="line">        <span class="keyword">int</span> len = pq.size();<span class="comment">//这里之所以取出.size()大小，因为每一次poll()之后size大小都会变化，所以不能作为for循环的判断条件  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;  </span><br><span class="line">            System.out.print(pq.poll()+<span class="string">" "</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 优先队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
